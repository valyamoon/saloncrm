{"version":3,"sources":["node_modules/ngx-mask/fesm2015/ngx-mask.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,gBAAA,EAAA,YAAA;AAAA,aAAA,cAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,oBAAA,EAAA,YAAA;AAAA,aAAA,kBAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,eAAA,EAAA,YAAA;AAAA,aAAA,aAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,UAAA,EAAA,YAAA;AAAA,aAAA,QAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,aAAA,EAAA,YAAA;AAAA,aAAA,WAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,YAAA,EAAA,YAAA;AAAA,aAAA,UAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,eAAA,EAAA,YAAA;AAAA,aAAA,aAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,gBAAA,EAAA,YAAA;AAAA,aAAA,cAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,QAAA,EAAA,YAAA;AAAA,aAAA,MAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,eAAA,EAAA,YAAA;AAAA,aAAA,aAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,WAAA,EAAA,YAAA;AAAA,aAAA,SAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,mBAAA,EAAA,YAAA;AAAA,aAAA,iBAAA;AAAA,KAAA;AAAA;;;AAAA,QAAA,0CAAA,GAAA,mBAAA;AAAA;AAAA,mDAAA,CAAA;AAAA;;;AAAA,QAAA,kCAAA,GAAA,mBAAA;AAAA;AAAA,uCAAA,CAAA;AAAA;;;AAAA,QAAA,2CAAA,GAAA,mBAAA;AAAA;AAAA,qDAAA,CAAA;AAAA;;;AAAA,QAAA,4CAAA,GAAA,mBAAA;AAAA;AAAA,uDAAA,CAAA;AAKA;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,aAAA,OAAA,GAAA,CAAoB;;AACpB,QAAA,KAAA,EAAW,CAiCV;AACD;;;AACA,QAAA,MAAA,GAAA,IAAmB,0CAAA,CAAA,gBAAA,CAAnB,CAAiC,QAAjC,CAAA;AACA;;AACA,QAAA,UAAA,GAAA,IAAuB,0CAAA,CAAA,gBAAA,CAAvB,CAAqC,YAArC,CAAA;AACA;;AACA,QAAA,cAAA,GAAA,IAA2B,0CAAA,CAAA,gBAAA,CAA3B,CAAyC,gBAAzC,CAAA;AACA;;AACA,QAAA,aAAA,GAAA;AACA,MAAA,MAAA,EAAA,EADA;AAEA,MAAA,MAAA,EAAA,EAFA;AAGA,MAAA,iBAAA,EAAA,GAHA;AAIA,MAAA,aAAA,EAAA,GAJA;AAKA,MAAA,eAAA,EAAA,KALA;AAMA,MAAA,YAAA,EAAA,KANA;AAOA,MAAA,aAAA,EAAA,KAPA;AAQA,MAAA,oBAAA,EAAA,GARA;AASA,MAAA,qBAAA,EAAA,IATA;AAUA,MAAA,WAAA,EAAA,SAVA;AAWA,MAAA,mBAAA,EAAA,EAXA;AAYA,MAAA,cAAA,EAAA,EAZA;AAaA,MAAA,oBAAA,EAAA,KAbA;AAcA,MAAA,UAAA,EAAA,IAdA;AAeA;AACA,MAAA,iBAAA,EAAA,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,CAhBA;AAiBA,MAAA,QAAA,EAAA;AACA,aAAA;AACA,UAAA,OAAA,EAAA,IAAA,MAAA,CAAA,KAAA;AADA,SADA;AAIA,aAAA;AACA,UAAA,OAAA,EAAA,IAAA,MAAA,CAAA,KAAA,CADA;AAEA,UAAA,QAAA,EAAA;AAFA,SAJA;AAQA,QAAA,CAAA,EAAA;AACA,UAAA,OAAA,EAAA,IAAA,MAAA,CAAA,KAAA,CADA;AAEA,UAAA,MAAA,EAAA;AAFA,SARA;AAYA,QAAA,CAAA,EAAA;AACA,UAAA,OAAA,EAAA,IAAA,MAAA,CAAA,aAAA;AADA,SAZA;AAeA,QAAA,CAAA,EAAA;AACA,UAAA,OAAA,EAAA,IAAA,MAAA,CAAA,UAAA;AADA,SAfA;AAkBA,QAAA,CAAA,EAAA;AACA,UAAA,OAAA,EAAA,IAAA,MAAA,CAAA,KAAA;AADA,SAlBA;AAqBA,QAAA,CAAA,EAAA;AACA,UAAA,OAAA,EAAA,IAAA,MAAA,CAAA,KAAA;AADA,SArBA;AAwBA,QAAA,CAAA,EAAA;AACA,UAAA,OAAA,EAAA,IAAA,MAAA,CAAA,KAAA;AADA,SAxBA;AA2BA,QAAA,CAAA,EAAA;AACA,UAAA,OAAA,EAAA,IAAA,MAAA,CAAA,KAAA;AADA,SA3BA;AA8BA,QAAA,CAAA,EAAA;AACA,UAAA,OAAA,EAAA,IAAA,MAAA,CAAA,KAAA;AADA,SA9BA;AAiCA,QAAA,CAAA,EAAA;AACA,UAAA,OAAA,EAAA,IAAA,MAAA,CAAA,KAAA;AADA;AAjCA;AAjBA,KAAA;AAuDA;;AACA,QAAA,SAAA,GAAA,CAAA,UAAA,EAAA,OAAA,EAAA,OAAA,CAAA;AACA;;AACA,QAAA,iBAAA,GAAA,CACA,SADA,EAEA,IAFA,EAGA,IAHA,EAIA,IAJA,EAKA,WALA,EAMA,YANA,EAOA,OAPA,EAQA,IARA,EASA,IATA,CAAA;AAYA;AACA;AACA;AACA;;QACA,kB;AACA;AACA;AACA;AACA,kCAAA,OAAA,EAAA;AAAA;;AAAA;;AACA,aAAA,OAAA,GAAA,OAAA;AACA,aAAA,cAAA,GAAA,EAAA;AACA,aAAA,WAAA,GAAA,EAAA;AACA,aAAA,mBAAA,GAAA,EAAA;;AACA,aAAA,qBAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAA,GAAA,EAAA,qBAAA,EAAA,WAAA,EAAA,SAAA,EAAA;AACA;AACA,cAAA,CAAA,GAAA,GAAA,CAAA,KAAA,CAAA,WAAA,CAAA;AACA;;AACA,cAAA,QAAA,GAAA,CAAA,CAAA,MAAA,GAAA,CAAA,aAA+C,WAA/C,SAA6D,CAAA,CAAA,CAAA,CAA7D,IAAkE,EAAlE;AACA;;AACA,cAAA,GAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AACA;;AACA,cAAA,cAAA,GAAA,KAAA,CAAA,cAAA,CAAA,OAAA,CAAA,KAAA,EAAA,EAAA,CAAA;;AACA,cAAA,cAAA,IAAA,CAAA,cAAA,EAAA;AACA,gBAAA,GAAA,CAAA,CAAA,CAAA,KAAA,GAAA,EAAA;AACA,cAAA,GAAA,cAA8B,GAAA,CAAA,KAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,EAAA,KAAA,CAAA,CAAA,EAAA,cAAA,CAAA,MAAA,CAA9B,CAAA;AACA,aAFA,MAGA;AACA,cAAA,GAAA,GAAA,GAAA,CAAA,KAAA,CAAA,CAAA,EAAA,cAAA,CAAA,MAAA,CAAA;AACA;AACA;AACA;;;AACA,cAAA,GAAA,GAAA,cAAA;;AACA,iBAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,EAAA;AACA,YAAA,GAAA,GAAA,GAAA,CAAA,OAAA,CAAA,GAAA,EAAA,OAAA,qBAAA,GAAA,IAAA,CAAA;AACA;;AACA,cAAA,SAAA,KAAA,SAAA,EAAA;AACA,mBAAA,GAAA,GAAA,QAAA;AACA,WAFA,MAGA,IAAA,SAAA,KAAA,CAAA,EAAA;AACA,mBAAA,GAAA;AACA;;AACA,iBAAA,GAAA,GAAA,QAAA,CAAA,MAAA,CAAA,CAAA,EAAA,SAAA,GAAA,CAAA,CAAA;AACS,SApCT;;AAqCA,aAAA,UAAA;AAAA;AACA;AACA;AACA;AACA,kBAAA,GAAA,EAAA;AACA,iBAAA,MAAA,CAAA,GAAA,CAAA,IAAA,CAAA,IAAA,MAAA,CAAA,GAAA,CAAA,IAAA,GAAA;AACS,SANT;;AAOA,aAAA,YAAA;AAAA;AACA;AACA;AACA;AACA,kBAAA,cAAA,EAAA;AACA;AACA,cAAA,CAAA,GAAA,cAAA,CAAA,KAAA,CAAA,GAAA,CAAA;;AACA,cAAA,CAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,mBAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA;AACA;;AACA,iBAAA,QAAA;AACS,SAXT;;AAYA,aAAA,mBAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAA,UAAA,EAAA,SAAA,EAAA,aAAA,EAAA;AACA,cAAA,SAAA,GAAA,QAAA,EAAA;AACA;AACA,gBAAA,cAAA,GAAA,IAAA,MAAA,CAAA,KAAA,CAAA,uBAAA,CAAA,aAAA,kBAAuG,SAAvG,SAAA,CAAA;AACA;;AACA,gBAAA,cAAA,GAAA,UAAA,CAAA,KAAA,CAAA,cAAA,CAAA;;AACA,gBAAA,cAAA,IAAA,cAAA,CAAA,CAAA,CAAA,CAAA,MAAA,GAAA,CAAA,GAAA,SAAA,EAAA;AACA,cAAA,UAAA,GAAA,UAAA,CAAA,SAAA,CAAA,CAAA,EAAA,UAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACA,aAFA,MAGA,IAAA,SAAA,KAAA,CAAA,IAAA,UAAA,CAAA,QAAA,CAAA,aAAA,CAAA,EAAA;AACA,cAAA,UAAA,GAAA,UAAA,CAAA,SAAA,CAAA,CAAA,EAAA,UAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACA;AACA;;AACA,iBAAA,UAAA;AACS,SApBT;;AAqBA,aAAA,MAAA,GAAA,IAAA,GAAA,EAAA;AACA,aAAA,eAAA,GAAA,KAAA,OAAA,CAAA,eAAA;AACA,aAAA,qBAAA,GAAA,KAAA,OAAA,CAAA,qBAAA;AACA,aAAA,qBAAA,GAAA,KAAA,OAAA,CAAA,iBAAA;AACA,aAAA,qBAAA,GAAA,KAAA,OAAA,CAAA,QAAA;AACA,aAAA,MAAA,GAAA,KAAA,OAAA,CAAA,MAAA;AACA,aAAA,MAAA,GAAA,KAAA,OAAA,CAAA,MAAA;AACA,aAAA,iBAAA,GAAA,KAAA,OAAA,CAAA,iBAAA;AACA,aAAA,aAAA,GAAA,KAAA,OAAA,CAAA,aAAA;AACA,aAAA,WAAA,GAAA,KAAA,OAAA,CAAA,WAAA;AACA,aAAA,aAAA,GAAA,KAAA,OAAA,CAAA,aAAA;AACA,aAAA,oBAAA,GAAA,KAAA,OAAA,CAAA,oBAAA;AACA,aAAA,UAAA,GAAA,KAAA,OAAA,CAAA,UAAA;AACA,aAAA,cAAA,GAAA,KAAA,OAAA,CAAA,cAAA;AACA,aAAA,oBAAA,GAAA,KAAA,OAAA,CAAA,oBAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;6CACA,U,EAAA,c,EAAA;AAAA,+CACA,cADA;AAAA,cACA,IADA;AAAA,cACA,aADA;;AAEA,eAAA,aAAA,GAAA,aAAA;AACA,iBAAA,KAAA,SAAA,CAAA,UAAA,EAAA,IAAA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;kCACA,U,EAAA,c,EAGa;AAAA,cAHb,QAGa,uEAHb,CAGa;AAAA,cAHb,EAGa;AAHb;AACA;AACA;AACA,sBAAA,CAAa,CAAA;;AACb,cAAA,UAAA,KAAA,SAAA,IAAA,UAAA,KAAA,IAAA,IAAA,cAAA,KAAA,SAAA,EAAA;AACA,mBAAA,EAAA;AACA;AACA;;;AACA,cAAA,MAAA,GAAA,CAAA;AACA;;AACA,cAAA,MAAA,GAAA,EAAA;AACA;;AACA,cAAA,KAAA,GAAA,KAAA;AACA;;AACA,cAAA,cAAA,GAAA,KAAA;AACA;;AACA,cAAA,KAAA,GAAA,CAAA;AACA;;AACA,cAAA,QAAA,GAAA,KAAA;;AACA,cAAA,UAAA,CAAA,KAAA,CAAA,CAAA,EAAA,KAAA,MAAA,CAAA,MAAA,MAAA,KAAA,MAAA,EAAA;AACA,YAAA,UAAA,GAAA,UAAA,CAAA,KAAA,CAAA,KAAA,MAAA,CAAA,MAAA,EAAA,UAAA,CAAA,MAAA,CAAA;AACA;;AACA,cAAA,CAAA,CAAA,KAAA,MAAA,IAAA,UAAA,CAAA,QAAA,CAAA,KAAA,MAAA,CAAA,EAAA;AACA,YAAA,UAAA,GAAA,UAAA,CAAA,KAAA,CAAA,CAAA,EAAA,UAAA,CAAA,MAAA,GAAA,KAAA,MAAA,CAAA,MAAA,CAAA;AACA;AACA;;;AACA,cAAA,UAAA,GAAA,UAAA,CAAA,QAAA,GAAA,KAAA,CAAA,EAAA,CAAA;;AACA,cAAA,cAAA,KAAA,IAAA,EAAA;AACA,iBAAA,OAAA,GAAA,CAAA,EAAA,UAAA,CAAA,MAAA;AAAA;AACA;AACA;AACA;AACA,sBAAA,CAAA;AAAA,qBAAA,CAAA,KAAA,GAAA;AAAA,aAJA,EAIA,MAJA,GAIA,CAJA,IAIA,UAAA,CAAA,MAAA,GAAA,CAJA,CAAA;AAKA,YAAA,cAAA,GAAA,iBAAA;AACA;;AACA,cAAA,cAAA,CAAA,UAAA,CAAA,SAAA,CAAA,EAAA;AACA,gBAAA,UAAA,CAAA,KAAA,CAAA,aAAA,KAAA,UAAA,CAAA,KAAA,CAAA,mCAAA,CAAA,EAA8F;AAC9F,cAAA,UAAA,GAAA,KAAA,eAAA,CAAA,UAAA,CAAA;AACA;;AACA,kBAAA,SAAA,GAAA,KAAA,YAAA,CAAA,cAAA,CAAA;AACA,cAAA,UAAA,GAAA,KAAA,mBAAA,CAAA,UAAA,EAAA,SAAA,EAAA,GAAA,CAAA;AACA;;AACA,gBAAA,UAAA,CAAA,OAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,KAAA,UAAA,CAAA,UAAA,CAAA,SAAA,CAAA,CAAA,EAAA,UAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,CAAA,EAAA;AACA;AACA,kBAAA,IAAA,GAAA,UAAA,CAAA,SAAA,CAAA,CAAA,EAAA,UAAA,CAAA,OAAA,CAAA,GAAA,IAAA,CAAA,CAAA;AACA,cAAA,UAAA,aAAgC,IAAhC,SAAuC,UAAA,CAAA,SAAA,CAAA,UAAA,CAAA,OAAA,CAAA,GAAA,CAAA,EAAA,UAAA,CAAA,MAAA,CAAvC,CAAA;AACA;;AACA,gBAAA,KAAA,UAAA,CAAA,UAAA,CAAA,EAAA;AACA,cAAA,MAAA,GAAA,UAAA;AACA,aAFA,MAGA;AACA,cAAA,MAAA,GAAA,UAAA,CAAA,SAAA,CAAA,CAAA,EAAA,UAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACA;AACA,WAlBA,MAmBA,IAAA,cAAA,CAAA,UAAA,CAAA,WAAA,CAAA,EAAA;AACA,gBAAA,UAAA,CAAA,KAAA,CAAA,WAAA,KACA,UAAA,CAAA,KAAA,CAAA,SAAA,CADA,IAEA,UAAA,CAAA,KAAA,CAAA,aAAA,CAFA,IAGA,UAAA,CAAA,KAAA,CAAA,yCAAA,CAHA,IAIA,UAAA,CAAA,KAAA,CAAA,eAAA,CAJA,EAIA;AACA,cAAA,UAAA,GAAA,KAAA,eAAA,CAAA,UAAA,CAAA;AACA;;AACA,YAAA,UAAA,GACA,UAAA,CAAA,MAAA,GAAA,CAAA,IAAA,UAAA,CAAA,CAAA,CAAA,KAAA,GAAA,IAAA,UAAA,CAAA,CAAA,CAAA,KAAA,KAAA,aAAA,GACA,UAAA,CAAA,KAAA,CAAA,CAAA,EAAA,UAAA,CAAA,MAAA,CADA,GAEA,UAHA,CARA,CAYA;AACA;;AACA;;AACA,gBAAA,4BAAA,GAAA,KAAA,uBAAA,CAAA,KAAA,iBAAA,CAAA;AACA;;;AACA,gBAAA,oBAAA,GAAA,KAAA,uBAAA,CAAA,KAAA,aAAA,CAAA;AACA;;;AACA,gBAAA,YAAA,GAAA,wCACA,OADA,CACA,4BADA,EACA,EADA,EAEA,OAFA,CAEA,oBAFA,EAEA,EAFA,CAAA;AAGA;;AACA,gBAAA,iBAAA,GAAA,IAAA,MAAA,CAAA,MAAA,YAAA,GAAA,GAAA,CAAA;;AACA,gBAAA,UAAA,CAAA,KAAA,CAAA,iBAAA,CAAA,EAAA;AACA,cAAA,UAAA,GAAA,UAAA,CAAA,SAAA,CAAA,CAAA,EAAA,UAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACA;AACA;;;AACA,gBAAA,UAAA,GAAA,KAAA,YAAA,CAAA,cAAA,CAAA;;AACA,YAAA,UAAA,GAAA,KAAA,mBAAA,CAAA,UAAA,EAAA,UAAA,EAAA,KAAA,aAAA,CAAA;AACA;;AACA,gBAAA,SAAA,GAAA,UAAA,CAAA,OAAA,CAAA,IAAA,MAAA,CAAA,4BAAA,EAAA,GAAA,CAAA,EAAA,EAAA,CAAA;AACA,YAAA,MAAA,GAAA,KAAA,qBAAA,CAAA,SAAA,EAAA,KAAA,iBAAA,EAAA,KAAA,aAAA,EAAA,UAAA,CAAA;AACA;;AACA,gBAAA,UAAA,GAAA,MAAA,CAAA,OAAA,CAAA,GAAA,IAAA,UAAA,CAAA,OAAA,CAAA,GAAA,CAAA;AACA;;AACA,gBAAA,SAAA,GAAA,MAAA,CAAA,MAAA,GAAA,UAAA,CAAA,MAAA;;AACA,gBAAA,SAAA,GAAA,CAAA,IAAA,MAAA,CAAA,QAAA,CAAA,KAAA,GAAA,EAAA;AACA,cAAA,cAAA,GAAA,IAAA;AACA;;AACA,kBAAA,MAAA,GAAA,CAAA;;AACA,iBAAA;AACA,qBAAA,MAAA,CAAA,GAAA,CAAA,QAAA,GAAA,MAAA;;AACA,gBAAA,MAAA;AACiB,eAHjB,QAGiB,MAAA,GAAA,SAHjB;AAIA,aARA,MASA,IAAA,UAAA,KAAA,CAAA,IAAA,QAAA,GAAA,CAAA,IAAA,EAAA,MAAA,CAAA,OAAA,CAAA,GAAA,KAAA,QAAA,IAAA,QAAA,GAAA,CAAA,CAAA,IACA,EAAA,MAAA,CAAA,OAAA,CAAA,GAAA,KAAA,QAAA,IAAA,QAAA,GAAA,CAAA,KAAA,SAAA,IAAA,CADA,EACA;AACA,mBAAA,MAAA,CAAA,KAAA;;AACA,cAAA,cAAA,GAAA,IAAA;AACA,cAAA,KAAA,GAAA,SAAA;AACA,cAAA,QAAA,IAAA,SAAA;;AACA,mBAAA,MAAA,CAAA,GAAA,CAAA,QAAA;AACA,aAPA,MAQA;AACA,mBAAA,MAAA,CAAA,KAAA;AACA;AACA,WAzDA,MA0DA;AACA,kBACA;AACA,gBAAA,CAAA,GAAA,CAAA,EAAA,WAAA,GAAA,UAAA,CAAA,CAAA,CAFA,EAEmD,CAAA,GAAA,UAAA,CAAA,MAFnD,EAE0E,CAAA,IAAA,WAAA,GAAA,UAAA,CAAA,CAAA,CAF1E,EAE0E;AAC1E,kBAAA,MAAA,KAAA,cAAA,CAAA,MAAA,EAAA;AACA;AACA;;AACA,kBAAA,KAAA,gBAAA,CAAA,WAAA,EAAA,cAAA,CAAA,MAAA,CAAA,KAAA,cAAA,CAAA,MAAA,GAAA,CAAA,CAAA,KAAA,GAAA,EAAA;AACA,gBAAA,MAAA,IAAA,WAAA;AACA,gBAAA,MAAA,IAAA,CAAA;AACA,eAHA,MAIA,IAAA,cAAA,CAAA,MAAA,GAAA,CAAA,CAAA,KAAA,GAAA,IACA,KADA,IAEA,KAAA,gBAAA,CAAA,WAAA,EAAA,cAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAFA,EAEA;AACA,gBAAA,MAAA,IAAA,WAAA;AACA,gBAAA,MAAA,IAAA,CAAA;AACA,gBAAA,KAAA,GAAA,KAAA;AACA,eANA,MAOA,IAAA,KAAA,gBAAA,CAAA,WAAA,EAAA,cAAA,CAAA,MAAA,CAAA,KAAA,cAAA,CAAA,MAAA,GAAA,CAAA,CAAA,KAAA,GAAA,EAAA;AACA,gBAAA,MAAA,IAAA,WAAA;AACA,gBAAA,KAAA,GAAA,IAAA;AACA,eAHA,MAIA,IAAA,cAAA,CAAA,MAAA,GAAA,CAAA,CAAA,KAAA,GAAA,IACA,KAAA,gBAAA,CAAA,WAAA,EAAA,cAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CADA,EACA;AACA,gBAAA,MAAA,IAAA,WAAA;AACA,gBAAA,MAAA,IAAA,CAAA;AACA,eAJA,MAKA,IAAA,KAAA,gBAAA,CAAA,WAAA,EAAA,cAAA,CAAA,MAAA,CAAA,KACA,KAAA,WAAA,IACA,KAAA,qBAAA,CAAA,cAAA,CAAA,MAAA,CAAA,CADA,IAEA,KAAA,qBAAA,CAAA,cAAA,CAAA,MAAA,CAAA,EAAA,MAAA,KAAA,WAHA,EAGA;AACA,oBAAA,cAAA,CAAA,MAAA,CAAA,KAAA,GAAA,EAAA;AACA,sBAAA,MAAA,CAAA,WAAA,CAAA,GAAA,CAAA,EAAA;AACA,oBAAA,MAAA,IAAA,CAAA;AACA;;AACA,wBAAA,UAAA,GAAA,QAAA,IAAA,CAAA,cAAA,CAAA,KAAA,CAAA,CAAA,EAAA,MAAA,CAAA,IAAA,UAAA,CAAA,MAAA,GAAA,MAAA;;AACA,yBAAA,MAAA,CAAA,GAAA,CAAA,UAAA,GAAA,KAAA,MAAA,CAAA,MAAA,IAAA,CAAA;;AACA,oBAAA,CAAA;AACA;AACA;AACA;;AACA,oBAAA,cAAA,CAAA,MAAA,CAAA,KAAA,GAAA,EAAA;AACA,sBAAA,MAAA,KAAA,GAAA,IAAA,MAAA,CAAA,WAAA,CAAA,GAAA,CAAA,EAAA;AACA,oBAAA,MAAA,IAAA,CAAA;AACA,oBAAA,CAAA;AACA;AACA;AACA;;AACA,oBAAA,cAAA,CAAA,MAAA,CAAA,KAAA,GAAA,EAAA;AACA,sBAAA,MAAA,CAAA,WAAA,CAAA,GAAA,CAAA,EAAA;AACA,oBAAA,MAAA,IAAA,CAAA;AACA;;AACA,wBAAA,WAAA,GAAA,QAAA,IAAA,CAAA,cAAA,CAAA,KAAA,CAAA,CAAA,EAAA,MAAA,CAAA,IAAA,UAAA,CAAA,MAAA,GAAA,MAAA;;AACA,yBAAA,MAAA,CAAA,GAAA,CAAA,WAAA,GAAA,KAAA,MAAA,CAAA,MAAA,IAAA,CAAA;;AACA,oBAAA,CAAA;AACA;AACA;AACA;;AACA,oBAAA,cAAA,CAAA,MAAA,CAAA,KAAA,GAAA,EAAA;AACA,sBAAA,MAAA,CAAA,WAAA,CAAA,GAAA,CAAA,EAAA;AACA,oBAAA,MAAA,IAAA,CAAA;AACA;;AACA,wBAAA,WAAA,GAAA,QAAA,IAAA,CAAA,cAAA,CAAA,KAAA,CAAA,CAAA,EAAA,MAAA,CAAA,IAAA,UAAA,CAAA,MAAA,GAAA,MAAA;;AACA,yBAAA,MAAA,CAAA,GAAA,CAAA,WAAA,GAAA,KAAA,MAAA,CAAA,MAAA,IAAA,CAAA;;AACA,oBAAA,CAAA;AACA;AACA;AACA;AACA;;;AACA,oBAAA,SAAA,GAAA,EAAA;;AACA,oBAAA,cAAA,CAAA,MAAA,CAAA,KAAA,GAAA,EAAA;AACA,sBAAA,MAAA,CAAA,UAAA,CAAA,KAAA,CAAA,MAAA,EAAA,MAAA,GAAA,CAAA,CAAA,CAAA,GAAA,SAAA,IAAA,UAAA,CAAA,MAAA,GAAA,CAAA,CAAA,KAAA,GAAA,EAAA;AACA,oBAAA,MAAA,IAAA,CAAA;AACA;;AACA,wBAAA,WAAA,GAAA,QAAA,IAAA,CAAA,cAAA,CAAA,KAAA,CAAA,CAAA,EAAA,MAAA,CAAA,IAAA,UAAA,CAAA,MAAA,GAAA,MAAA;;AACA,yBAAA,MAAA,CAAA,GAAA,CAAA,WAAA,GAAA,KAAA,MAAA,CAAA,MAAA,IAAA,CAAA;;AACA,oBAAA,CAAA;AACA;AACA;AACA;;AACA,oBAAA,cAAA,CAAA,MAAA,CAAA,KAAA,GAAA,EAAA;AACA;AACA,sBAAA,WAAA,GAAA,EAAA,CAFA,CAGA;;AACA;;AACA,sBAAA,WAAA,GAAA,MAAA,KAAA,CAAA,KACA,MAAA,CAAA,WAAA,CAAA,GAAA,CAAA,IACA,MAAA,CAAA,UAAA,CAAA,KAAA,CAAA,MAAA,EAAA,MAAA,GAAA,CAAA,CAAA,CAAA,GAAA,WADA,IAEA,UAAA,CAAA,MAAA,GAAA,CAAA,CAAA,KAAA,GAHA,CAAA,CALA,CASA;;AACA;;AACA,sBAAA,ckBA;;AACA;;AACA,sBAAA,cAAA,GAAA,MAAA,CAAA,UAAA,CAAA,KAAA,CAAA,MAAA,GAAA,CAAA,EAAA,MAAA,GAAA,CAAA,CAAA,CAAA,IAAA,SAAA,IACA,CAAA,UAAA,CAAA,KAAA,CAAA,MAAA,GAAA,CAAA,EAAA,MAAA,GAAA,CAAA,EAAA,QAAA,CAAA,GAAA,CADA,IAEA,UAAA,CAAA,MAAA,GAAA,CAAA,CAAA,KAAA,GAFA,KAGA,MAAA,CAAA,UAAA,CAAA,KAAA,CAAA,MAAA,EAAA,MAAA,GAAA,CAAA,CAAA,CAAA,GAAA,WAAA,IAAA,UAAA,CAAA,MAAA,GAAA,CAAA,CAAA,KAAA,GAHA,CAAA,CApBA,CAwBA;;AACA;;AACA,sBAAA,cAAA,GAAA,MAAA,CAAA,UAAA,CAAA,KAAA,CAAA,MAAA,GAAA,CAAA,EAAA,MAAA,GAAA,CAAA,CAAA,CAAA,GAAA,SAAA,IACA,CAAA,UAAA,CAAA,KAAA,CAAA,MAAA,GAAA,CAAA,EAAA,MAAA,GAAA,CAAA,EAAA,QAAA,CAAA,GAAA,CADA,IAEA,CAAA,UAAA,CAAA,KAAA,CAAA,MAAA,GAAA,CAAA,EAAA,MAAA,EAAA,QAAA,CAAA,GAAA,CAAA,IACA,MAAA,CAAA,UAAA,CAAA,KAAA,CAAA,MAAA,GAAA,CAAA,EAAA,MAAA,CAAA,CAAA,GAAA,WAHA,CA1BA,CA8BA;;AACA;;AACA,sBAAA,cAAA,GAAA,MAAA,CAAA,UAAA,CAAA,KAAA,CAAA,MAAA,GAAA,CAAA,EAAA,MAAA,GAAA,CAAA,CAAA,CAAA,IAAA,SAAA,IACA,CAAA,UAAA,CAAA,KAAA,CAAA,MAAA,GAAA,CAAA,EAAA,MAAA,GAAA,CAAA,EAAA,QAAA,CAAA,GAAA,CADA,IAEA,UAAA,CAAA,MAAA,GAAA,CAAA,CAAA,KAAA,GAFA,IAGA,MAAA,CAAA,UAAA,CAAA,KAAA,CAAA,MAAA,GAAA,CAAA,EAAA,MAAA,GAAA,CAAA,CAAA,CAAA,GAAA,WAHA;;AAIA,sBAAA,WAAA,IAAA,cAAA,IAAA,cAAA,IAAA,cAAA,IAAA,cAAA,EAAA;AACA,oBAAA,MAAA,IAAA,CAAA;AACA;;AACA,wBAAA,WAAA,GAAA,QAAA,IAAA,CAAA,cAAA,CAAA,KAAA,CAAA,CAAA,EAAA,MAAA,CAAA,IAAA,UAAA,CAAA,MAAA,GAAA,MAAA;;AACA,yBAAA,MAAA,CAAA,GAAA,CAAA,WAAA,GAAA,KAAA,MAAA,CAAA,MAAA,IAAA,CAAA;;AACA,oBAAA,CAAA;AACA;AACA;AACA;;AACA,gBAAA,MAAA,IAAA,WAAA;AACA,gBAAA,MAAA;AACA,eApGA,MAqGA,IAAA,KAAA,qBAAA,CAAA,OAAA,CAAA,cAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,EAAA;AACA,gBAAA,MAAA,IAAA,cAAA,CAAA,MAAA,CAAA;AACA,gBAAA,MAAA;AACA;;AACA,oBAAA,WAAA,GAAA,QAAA,IAAA,CAAA,cAAA,CAAA,KAAA,CAAA,CAAA,EAAA,MAAA,CAAA,IAAA,UAAA,CAAA,MAAA,GAAA,MAAA;;AACA,qBAAA,MAAA,CAAA,GAAA,CAAA,WAAA,GAAA,KAAA,MAAA,CAAA,MAAA,IAAA,CAAA;;AACA,gBAAA,CAAA;AACA,eAPA,MAQA,IAAA,KAAA,qBAAA,CAAA,OAAA,CAAA,WAAA,IAAA,CAAA,CAAA,IACA,KAAA,qBAAA,CAAA,cAAA,CAAA,MAAA,CAAA,CADA,IAEA,KAAA,qBAAA,CAAA,cAAA,CAAA,MAAA,CAAA,EAAA,QAFA,EAEA;AACA,oBAAA,CAAA,CAAA,UAAA,CAAA,MAAA,CAAA,IAAA,cAAA,KAAA,iBAAA,EAAA;AACA,kBAAA,MAAA,IAAA,UAAA,CAAA,MAAA,CAAA;AACA;;AACA,gBAAA,MAAA;AACA,gBAAA,CAAA;AACA,eARA,MASA,IAAA,KAAA,cAAA,CAAA,MAAA,GAAA,CAAA,MAAA,GAAA,IACA,KAAA,gBAAA,CAAA,KAAA,cAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CADA,IAEA,KAAA,gBAAA,CAAA,WAAA,MAAA,KAAA,cAAA,CAAA,MAAA,GAAA,CAAA,CAFA,IAGA,KAHA,EAGA;AACA,gBAAA,MAAA,IAAA,CAAA;AACA,gBAAA,MAAA,IAAA,WAAA;AACA,eANA,MAOA,IAAA,KAAA,cAAA,CAAA,MAAA,GAAA,CAAA,MAAA,GAAA,IACA,KAAA,gBAAA,CAAA,KAAA,cAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CADA,IAEA,KAAA,gBAAA,CAAA,WAAA,MAAA,KAAA,cAAA,CAAA,MAAA,GAAA,CAAA,CAFA,IAGA,KAHA,EAGA;AACA,gBAAA,MAAA,IAAA,CAAA;AACA,gBAAA,MAAA,IAAA,WAAA;AACA,eANA,MAOA,IAAA,KAAA,aAAA,IAAA,KAAA,qBAAA,CAAA,OAAA,CAAA,WAAA,IAAA,CAAA,IAAA,WAAA,KAAA,KAAA,oBAAA,EAAA;AACA,gBAAA,QAAA,GAAA,IAAA;AACA;AACA;AACA;;AACA,cAAA,MAAA,CAAA,MAAA,GAAA,CAAA,KAAA,cAAA,CAAA,MAAA,IACA,KAAA,qBAAA,CAAA,OAAA,CAAA,cAAA,CAAA,cAAA,CAAA,MAAA,GAAA,CAAA,CAAA,MAAA,CAAA,CADA,EACA;AACA,YAAA,MAAA,IAAA,cAAA,CAAA,cAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACA;AACA;;;AACA,cAAA,WAAA,GAAA,QAAA,GAAA,CAAA;;AACA,iBAAA,KAAA,MAAA,CAAA,GAAA,CAAA,WAAA,CAAA,EAAA;AACA,YAAA,KAAA;AACA,YAAA,WAAA;AACA;AACA;;;AACA,cAAA,WAAA,GAAA,KAAA,MAAA,CAAA,GAAA,CAAA,QAAA,IAAA,KAAA,GAAA,CAAA;;AACA,cAAA,QAAA,EAAA;AACA,YAAA,WAAA;AACA;;AACA,UAAA,EAAA,CAAA,WAAA,EAAA,cAAA,CAAA;;AACA,cAAA,KAAA,GAAA,CAAA,EAAA;AACA,iBAAA,MAAA,CAAA,KAAA;AACA;AACA;;;AACA,cAAA,GAAA,aAAqB,KAAA,MAArB,SAAmC,MAAnC,SAA4C,KAAA,MAA5C,CAAA;;AACA,cAAA,MAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,YAAA,GAAA,aAAqB,KAAA,MAArB,SAAmC,MAAnC,CAAA;AACA;;AACA,iBAAA,GAAA;AACA;AACA;AACA;AACA;AACA;;;;yCACA,W,EAAA;AACA,iBAAA,KAAA,qBAAA,CAAA,IAAA;AAAA;AACA;AACA;AACA;AACA,oBAAA,GAAA;AAAA,mBAAA,GAAA,KAAA,WAAA;AAAA,WAJA,CAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;yCACA,W,EAAA,U,EAAA;AACA,eAAA,qBAAA,GAAA,KAAA,aAAA,GAAA,KAAA,aAAA,GAAA,KAAA,qBAAA;AACA,iBAAA,KAAA,qBAAA,CAAA,UAAA,KACA,KAAA,qBAAA,CAAA,UAAA,EAAA,OADA,IAEA,KAAA,qBAAA,CAAA,UAAA,EAAA,OAAA,CAAA,IAAA,CAAA,WAAA,CAFA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;wCACA,G,EAAA;AACA,iBAAA,GAAA,CACA,KADA,CACA,EADA,EAEA,MAFA;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAA,CAAA,EAAA,GAAA,EAAA;AACA,mBAAA,CAAA,CAAA,KAAA,CAAA,QAAA,KAAA,CAAA,KAAA,GAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,KAAA,GAAA,IAAA,GAAA,KAAA,CAAA;AACS,WATT,EAUA,IAVA,CAUA,EAVA,CAAA;AAWA;AACA;AACA;AACA;AACA;AACA;;;;gDACA,K,EAAA;AACA;AACA,cAAA,aAAA,GAAA,cAAA;AACA,iBAAA,KAAA,KAAA,GAAA,GAAA,KAAA,GAAA,aAAA,CAAA,OAAA,CAAA,KAAA,KAAA,CAAA,GAAA,OAAA,KAAA,GAAA,KAAA;AACA;;;;;;AAEA,IAAA,kBAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,YAAA;AAAZ,KADA,CAAA;AAGA;;AACA,IAAA,kBAAA,CAAA,cAAA,GAAA;AAAA,aAAA,CACA;AAAK,QAAA,IAAA,EAAA,SAAL;AAAK,QAAA,UAAA,EAAA,CAAA;AAAgC,UAAA,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAvC;AAA6C,UAAA,IAAA,EAAA,CAAA,MAAA;AAA7C,SAAA;AAAL,OADA,CAAA;AAAA,KAAA;;AAGA,QAAA,KAAA,EAAW,CAuEV;AAED;AACA;AACA;AACA;;;QACA,W;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAAA,QAAA,EAAA,OAAA,EAAA,WAAA,EAAA,SAAA,EAAA;AAAA;;AAAA;;AACA,mCAAA,OAAA;AACA,eAAA,QAAA,GAAA,QAAA;AACA,eAAA,OAAA,GAAA,OAAA;AACA,eAAA,WAAA,GAAA,WAAA;AACA,eAAA,SAAA,GAAA,SAAA;AACA,eAAA,cAAA,GAAA,EAAA;AACA,eAAA,aAAA,GAAA,KAAA;AACA,eAAA,oBAAA,GAAA,GAAA;AACA,eAAA,WAAA,GAAA,EAAA;AACA,eAAA,QAAA,GAAA,IAAA;AACA,eAAA,MAAA,GAAA,IAAA;;AACA,eAAA,QAAA;AAAA;AACA;AACA;AACA;AACA,kBAAA,CAAA,EAAA,CAAkB,CAJlB;;AAKA,eAAA,YAAA,GAAA,OAAA,WAAA,CAAA,aAAA;AAjBA;AAkBA,O,CACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;kCACA,U,EAAA,c,EAGa;AAAA;;AAAA,cAHb,QAGa,uEAHb,CAGa;AAAA,cAHb,EAGa;AAHb;AACA;AACA;AACA,sBAAA,CAAa,CAAA;;AACb,cAAA,CAAA,cAAA,EAAA;AACA,mBAAA,UAAA;AACA;;AACA,eAAA,WAAA,GAAA,KAAA,aAAA,GAAA,KAAA,eAAA,EAAA,GAAA,EAAA;;AACA,cAAA,KAAA,cAAA,KAAA,IAAA,IAAA,KAAA,aAAA,EAAA;AACA,iBAAA,WAAA,GAAA,KAAA,eAAA,CAAA,UAAA,IAAA,GAAA,CAAA;AACA;;AACA,cAAA,CAAA,UAAA,IAAA,KAAA,aAAA,EAAA;AACA,iBAAA,iBAAA,CAAA,KAAA,MAAA;AACA,mBAAA,KAAA,MAAA,GAAA,KAAA,WAAA;AACA;AACA;;;AACA,cAAA,SAAA,GAAA,CAAA,CAAA,UAAA,IAAA,OAAA,KAAA,QAAA,KAAA,QAAA,GAAA,UAAA,CAAA,KAAA,QAAA,CAAA,GAAA,EAAA;AACA;;AACA,cAAA,aAAA,GAAA,EAAA;;AACA,cAAA,KAAA,WAAA,KAAA,SAAA,EAAA;AACA;AACA,gBAAA,YAAA,GAAA,KAAA,WAAA,CAAA,KAAA,CAAA,EAAA,CAAA,CAFA,CAGA;;AACA,YAAA,UAAA,KAAA,EAAA,IAAA,YAAA,CAAA,MAAA,GACA,OAAA,KAAA,QAAA,KAAA,QAAA,IAAA,OAAA,KAAA,MAAA,KAAA,QAAA,GACA,UAAA,CAAA,MAAA,GAAA,YAAA,CAAA,MAAA,GACA,YAAA,CAAA,MAAA,CAAA,KAAA,QAAA,EAAA,CAAA,EAAA,SAAA,CADA,GAEA,UAAA,CAAA,MAAA,GAAA,YAAA,CAAA,MAAA,GACA,YAAA,CAAA,MAAA,GAAA,UAAA,CAAA,MAAA,KAAA,CAAA,GACA,YAAA,CAAA,MAAA,CAAA,KAAA,QAAA,GAAA,CAAA,EAAA,CAAA,CADA,GAEA,YAAA,CAAA,MAAA,CAAA,KAAA,QAAA,EAAA,KAAA,MAAA,GAAA,KAAA,QAAA,CAHA,GAIA,IAPA,GAQA,IATA,GAUA,YAAA,GAAA,EAVA,CAJA,CAeA;;AACA,YAAA,aAAA,GAAA,KAAA,WAAA,CAAA,MAAA,GAAA,KAAA,iBAAA,CAAA,YAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA,GAAA,UAAA;AACA;;AACA,UAAA,aAAA,GAAA,OAAA,CAAA,aAAA,CAAA,IAAA,aAAA,CAAA,MAAA,GAAA,aAAA,GAAA,UAAA;AACA;;AACA,cAAA,MAAA,8EAAA,aAAA,EAAA,cAAA,EAAA,QAAA,EAAA,EAAA,CAAA;;AACA,eAAA,WAAA,GAAA,KAAA,cAAA,CAAA,MAAA,CAAA,CArCa,CAsCb;AACA;;AACA,cAAA,KAAA,iBAAA,KAAA,GAAA,IAAA,KAAA,aAAA,KAAA,GAAA,EAAA;AACA,iBAAA,aAAA,GAAA,GAAA;AACA,WA1Ca,CA2Cb;;;AACA,cAAA,KAAA,cAAA,CAAA,UAAA,CAAA,WAAA,KAAA,KAAA,qBAAA,KAAA,IAAA,EAAA;AACA,iBAAA,qBAAA,GAAA,KAAA,qBAAA,CAAA,MAAA;AAAA;AACA;AACA;AACA;AACA,sBAAA,IAAA;AAAA,qBAAA,IAAA,KAAA,MAAA,CAAA,aAAA;AAAA,aAJA,CAAA;AAKA;;AACA,eAAA,iBAAA,CAAA,MAAA;;AACA,cAAA,CAAA,KAAA,aAAA,EAAA;AACA,gBAAA,KAAA,WAAA,EAAA;AACA,qBAAA,MAAA,IAAA,MAAA,CAAA,MAAA,GAAA,KAAA,SAAA,CAAA,MAAA,EAAA,KAAA,cAAA,CAAA,GAAA,MAAA;AACA;;AACA,mBAAA,MAAA;AACA;AACA;;;AACA,cAAA,MAAA,GAAA,MAAA,CAAA,MAAA;AACA;;AACA,cAAA,SAAA,GAAA,KAAA,MAAA,GAAA,KAAA,WAAA;AACA,iBAAA,MAAA,IAAA,KAAA,cAAA,KAAA,IAAA,GAAA,SAAA,GAAA,SAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;4CAIa;AAAA,cAHb,QAGa,uEAHb,CAGa;AAAA,cAHb,EAGa;AAHb;AACA;AACA;AACA,sBAAA,CAAa,CAAA;AACb,eAAA,YAAA,CAAA,KAAA,GAAA,KAAA,SAAA,CAAA,KAAA,YAAA,CAAA,KAAA,EAAA,KAAA,cAAA,EAAA,QAAA,EAAA,EAAA,CAAA;;AACA,cAAA,KAAA,YAAA,KAAA,KAAA,QAAA,CAAA,aAAA,EAAA;AACA;AACA;;AACA,eAAA,iBAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;kCACA,U,EAAA,c,EAAA;AAAA;;AACA,iBAAA,UAAA,CACA,KADA,CACA,EADA,EAEA,GAFA;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAA,IAAA,EAAA,KAAA,EAAA;AACA,gBAAA,MAAA,CAAA,qBAAA,IACA,MAAA,CAAA,qBAAA,CAAA,cAAA,CAAA,KAAA,CAAA,CADA,IAEA,MAAA,CAAA,qBAAA,CAAA,cAAA,CAAA,KAAA,CAAA,EAAA,MAFA,EAEA;AACA,qBAAA,MAAA,CAAA,qBAAA,CAAA,cAAA,CAAA,KAAA,CAAA,EAAA,MAAA;AACA;;AACA,mBAAA,IAAA;AACS,WAdT,EAeA,IAfA,CAeA,EAfA,CAAA;AAgBA,S,CACA;;AACA;AACA;AACA;AACA;;;;uCACA,G,EAAA;AAAA;;AACA;AACA,cAAA,OAAA,GAAA,GAAA,CACA,KADA,CACA,EADA,EAEA,MAFA;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAA,MAAA,EAAA,CAAA;AAAA,mBAAA,MAAA,CAAA,gBAAA,CAAA,MAAA,EAAA,MAAA,CAAA,cAAA,CAAA,CAAA,CAAA,KACA,MAAA,CAAA,qBAAA,CAAA,QAAA,CAAA,MAAA,CAAA,cAAA,CAAA,CAAA,CAAA,KAAA,MAAA,KAAA,MAAA,CAAA,cAAA,CAAA,CAAA,CADA;AAAA,WAPA,CAAA;;AASA,cAAA,OAAA,CAAA,IAAA,CAAA,EAAA,MAAA,GAAA,EAAA;AACA,mBAAA,OAAA,CAAA,IAAA,CAAA,EAAA,CAAA;AACA;;AACA,iBAAA,GAAA;AACA;AACA;AACA;AACA;AACA;;;;0CACA,U,EAAA;AAAA;;AACA;AACA,cAAA,eAAA,GAAA,EAAA;AACA;;AACA,cAAA,aAAA,GAAA,UAAA,IACA,UAAA,CAAA,KAAA,CAAA,EAAA,EAAA,GAAA;AAAA;AACA;AACA;AACA;AACA;AACA,oBAAA,UAAA,EAAA,KAAA,EAAA;AACA,gBAAA,MAAA,CAAA,qBAAA,CAAA,QAAA,CAAA,UAAA,CAAA,KAAA,GAAA,CAAA,CAAA,KACA,UAAA,CAAA,KAAA,GAAA,CAAA,CAAA,KAAA,MAAA,CAAA,cAAA,CAAA,KAAA,GAAA,CAAA,CADA,EACA;AACA,cAAA,eAAA,GAAA,UAAA;AACA,qBAAA,UAAA,CAAA,KAAA,GAAA,CAAA,CAAA;AACA;;AACA,gBAAA,eAAA,CAAA,MAAA,EAAA;AACA;AACA,kBAAA,aAAA,GAAA,eAAA;AACA,cAAA,eAAA,GAAA,EAAA;AACA,qBAAA,aAAA;AACA;;AACA,mBAAA,UAAA;AACa,WAlBb,CADA,IAoBA,EApBA;AAqBA,iBAAA,aAAA,CAAA,IAAA,CAAA,EAAA,CAAA;AACA;AACA;AACA;AACA;AACA;;;;wCACA,Q,EAAA;AACA,cAAA,KAAA,aAAA,IAAA,CAAA,CAAA,KAAA,mBAAA,EAAA;AACA,gBAAA,KAAA,cAAA,CAAA,MAAA,KAAA,KAAA,mBAAA,CAAA,MAAA,EAAA;AACA,oBAAA,IAAA,KAAA,CAAA,oDAAA,CAAA;AACA,aAFA,MAGA;AACA,qBAAA,KAAA,mBAAA;AACA;AACA,WAPA,MAQA,IAAA,KAAA,aAAA,EAAA;AACA,gBAAA,QAAA,EAAA;AACA,qBAAA,KAAA,WAAA,CAAA,QAAA,CAAA;AACA;;AACA,mBAAA,KAAA,cAAA,CAAA,OAAA,CAAA,KAAA,EAAA,KAAA,oBAAA,CAAA;AACA;;AACA,iBAAA,EAAA;AACA;AACA;AACA;AACA;;;;4CACA;AACA,cAAA,KAAA,eAAA,IACA,KAAA,MAAA,CAAA,MAAA,GAAA,KAAA,cAAA,CAAA,MAAA,GAAA,KAAA,MAAA,CAAA,MAAA,KACA,KAAA,YAAA,CAAA,KAAA,CAAA,OAAA,CAAA,IAAA,EAAA,EAAA,EAAA,MAFA,EAEA;AACA,iBAAA,mBAAA,GAAA,CAAA,OAAA,EAAA,EAAA,CAAA;AACA,iBAAA,SAAA,CAAA,KAAA,YAAA,CAAA,KAAA,EAAA,KAAA,cAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAIA;AACA;AACA;AACA;+CACA,I,EAAA;AAAA;;AACA;AACA,cAAA,KAAA,GAAA,IAAA,CAAA,KAAA,CAAA,EAAA,EAAA,MAAA;AAAA;AACA;AACA;AACA;AACA,oBAAA,IAAA;AAAA,mBAAA,MAAA,CAAA,gBAAA,CAAA,IAAA,CAAA;AAAA,WAJA,CAAA;AAKA,iBAAA,KAAA,CAAA,MAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;oCACA,Q,EAAA;AACA,cAAA,QAAA,KAAA,GAAA,EAAA;AACA,6BAAsB,KAAA,oBAAtB,cAAmD,KAAA,oBAAnD,cAAgF,KAAA,oBAAhF,cAA6G,KAAA,oBAA7G;AACA;AACA;;;AACA,cAAA,GAAA,GAAA,EAAA;;AACA,eAAA,IAAA,CAAA,GAAA,CAAA,EAAuB,CAAA,GAAA,QAAA,CAAA,MAAvB,EAA4C,CAAA,EAA5C,EAA4C;AAC5C,gBAAA,QAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA;AACA,cAAA,GAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAA,CAAA;AACA;AACA;;AACA,cAAA,GAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,6BAAsB,KAAA,oBAAtB,cAAmD,KAAA,oBAAnD,cAAgF,KAAA,oBAAhF;AACA;;AACA,cAAA,GAAA,CAAA,MAAA,GAAA,CAAA,IAAA,GAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,6BAAsB,KAAA,oBAAtB,cAAmD,KAAA,oBAAnD;AACA;;AACA,cAAA,GAAA,CAAA,MAAA,GAAA,CAAA,IAAA,GAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,mBAAA,KAAA,oBAAA;AACA;;AACA,cAAA,GAAA,CAAA,MAAA,GAAA,CAAA,IAAA,GAAA,CAAA,MAAA,IAAA,EAAA,EAAA;AACA,mBAAA,EAAA;AACA;;AACA,iBAAA,EAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;0CACA,U,EAAA;AACA,cAAA,KAAA,CAAA,OAAA,CAAA,KAAA,qBAAA,CAAA,EAAA;AACA,iBAAA,QAAA,CAAA,KAAA,WAAA,CAAA,KAAA,aAAA,CAAA,KAAA,aAAA,CAAA,UAAA,CAAA,CAAA,EAAA,KAAA,qBAAA,CAAA;AACA,WAFA,MAGA,IAAA,KAAA,qBAAA,EAAA;AACA,iBAAA,QAAA,CAAA,KAAA,aAAA,CAAA,UAAA,CAAA;AACA,WAFA,MAGA;AACA,iBAAA,QAAA,CAAA,KAAA,aAAA,CAAA,KAAA,aAAA,CAAA,UAAA,CAAA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;oCACA,K,EAAA,0B,EAAA;AACA,iBAAA,KAAA,GAAA,KAAA,CAAA,OAAA,CAAA,KAAA,gBAAA,CAAA,0BAAA,CAAA,EAAA,EAAA,CAAA,GAAA,KAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;sCACA,K,EAAA;AACA,cAAA,CAAA,KAAA,MAAA,EAAA;AACA,mBAAA,KAAA;AACA;;AACA,iBAAA,KAAA,GAAA,KAAA,CAAA,OAAA,CAAA,KAAA,MAAA,EAAA,EAAA,CAAA,GAAA,KAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;sCACA,K,EAAA;AACA,cAAA,CAAA,KAAA,MAAA,EAAA;AACA,mBAAA,KAAA;AACA;;AACA,iBAAA,KAAA,GAAA,KAAA,CAAA,OAAA,CAAA,KAAA,MAAA,EAAA,EAAA,CAAA,GAAA,KAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;gDACA,M,EAAA;AACA,iBAAA,KAAA,WAAA,CAAA,KAAA,aAAA,CAAA,KAAA,aAAA,CAAA,MAAA,CAAA,CAAA,EAAA,KAAA,qBAAA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;yCACA,0B,EAAA;AACA,iBAAA,IAAA,MAAA,CAAA,0BAAA,CAAA,GAAA;AAAA;AACA;AACA;AACA;AACA,oBAAA,IAAA;AAAA,+BAAuB,IAAvB;AAAA,WAJA,EAI4B,IAJ5B,CAI4B,GAJ5B,CAAA,EAI4B,IAJ5B,CAAA;AAKA;AACA;AACA;AACA;AACA;AACA;;;;sCACA,M,EAAA;AACA,cAAA,MAAA,KAAA,EAAA,EAAA;AACA,mBAAA,MAAA;AACA;AACA;;;AACA,cAAA,kBAAA,GAAA,KAAA,2BAAA,CAAA,KAAA,cAAA,CAAA;AACA;;;AACA,cAAA,cAAA,GAAA,KAAA,uBAAA,CAAA,MAAA,CAAA;;AACA,cAAA,KAAA,aAAA,KAAA,GAAA,EAAA;AACA,YAAA,cAAA,GAAA,cAAA,CAAA,OAAA,CAAA,KAAA,aAAA,EAAA,GAAA,CAAA;AACA;;AACA,cAAA,KAAA,aAAA,EAAA;AACA,gBAAA,kBAAA,EAAA;AACA,kBAAA,MAAA,KAAA,KAAA,aAAA,EAAA;AACA,uBAAA,IAAA;AACA;;AACA,qBAAA,KAAA,eAAA,CAAA,KAAA,cAAA,EAAA,cAAA,CAAA;AACA,aALA,MAMA;AACA,qBAAA,MAAA,CAAA,cAAA,CAAA;AACA;AACA,WAVA,MAWA;AACA,mBAAA,cAAA;AACA;AACA,S,CACA;;AACA;AACA;AACA;AACA;AACA;;;;oDACA,a,EAAA;AACA;AACA,cAAA,OAAA,GAAA,aAAA,CAAA,KAAA,CAAA,IAAA,MAAA,wBAAA,CAAA;AACA,iBAAA,OAAA,GAAA,MAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,GAAA,IAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;wCACA,mB,EAAA,c,EAAA;AACA,cAAA,mBAAA,CAAA,OAAA,CAAA,GAAA,IAAA,CAAA,EAAA;AACA,mBAAA,MAAA,CAAA,cAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CAAA;AACA;;AACA,iBAAA,MAAA,CAAA,cAAA,CAAA;AACA;;;gCAtKA;AAAA;AAAA,cAAA,IAAA;AAAA,cAAA,KAAA;;AACA,eAAA,SAAA,CAAA,WAAA,CAAA,KAAA,YAAA,EAAA,IAAA,EAAA,KAAA;AACA;;;;MArOA,kB;;AA2YA,IAAA,WAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,YAAA;AAAZ,KADA,CAAA;AAGA;;AACA,IAAA,WAAA,CAAA,cAAA,GAAA;AAAA,aAAA,CACA;AAAK,QAAA,IAAA,EAAA,SAAL;AAAK,QAAA,UAAA,EAAA,CAAA;AAAgC,UAAA,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAvC;AAA6C,UAAA,IAAA,EAAA,CAAS,4CAAA,CAAA,UAAA,CAAT;AAA7C,SAAA;AAAL,OADA,EAEA;AAAK,QAAA,IAAA,EAAA,SAAL;AAAK,QAAA,UAAA,EAAA,CAAA;AAAgC,UAAA,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAvC;AAA6C,UAAA,IAAA,EAAA,CAAA,MAAA;AAA7C,SAAA;AAAL,OAFA,EAGA;AAAK,QAAA,IAAA,EAAO,0CAAA,CAAA,YAAA;AAAZ,OAHA,EAIA;AAAK,QAAA,IAAA,EAAO,0CAAA,CAAA,WAAA;AAAZ,OAJA,CAAA;AAAA,KAAA;;AAMA,QAAA,KAAA,EAAW,CAwCV;AAED;AACA;AACA;AACA;AACA;;;QACA,a;AACA;AACA;AACA;AACA;AACA;AACA,6BAAA,QAAA,EAAA,YAAA,EAAA,OAAA,EAAA;AAAA;;AACA,aAAA,QAAA,GAAA,QAAA;AACA,aAAA,YAAA,GAAA,YAAA;AACA,aAAA,OAAA,GAAA,OAAA;AACA,aAAA,cAAA,GAAA,EAAA;AACA,aAAA,iBAAA,GAAA,EAAA;AACA,aAAA,QAAA,GAAA,EAAA;AACA,aAAA,MAAA,GAAA,EAAA;AACA,aAAA,MAAA,GAAA,EAAA;AACA,aAAA,iBAAA,GAAA,GAAA;AACA,aAAA,aAAA,GAAA,GAAA;AACA,aAAA,qBAAA,GAAA,IAAA;AACA,aAAA,WAAA,GAAA,IAAA;AACA,aAAA,aAAA,GAAA,IAAA;AACA,aAAA,oBAAA,GAAA,IAAA;AACA,aAAA,mBAAA,GAAA,IAAA;AACA,aAAA,YAAA,GAAA,IAAA;AACA,aAAA,eAAA,GAAA,IAAA;AACA,aAAA,UAAA,GAAA,IAAA;AACA,aAAA,cAAA,GAAA,IAAA;AACA,aAAA,oBAAA,GAAA,IAAA;AACA,aAAA,UAAA,GAAA,EAAA;AACA,aAAA,SAAA,GAAA,IAAA;;AACA,aAAA,QAAA;AAAA;AACA;AACA;AACA;AACA,kBAAA,CAAA,EAAA,CAAkB,CAJlB;;AAKA,aAAA,OAAA;AAAA;AACA;AACA;AACA,oBAAA,CAAiB,CAHjB;AAIA;AACA;AACA;AACA;AACA;;;;;oCACA,O,EAAA;AAAA,cACe,cADf,GAC+R,OAD/R,CACe,cADf;AAAA,cACe,iBADf,GAC+R,OAD/R,CACe,iBADf;AAAA,cACe,QADf,GAC+R,OAD/R,CACe,QADf;AAAA,cACe,MADf,GAC+R,OAD/R,CACe,MADf;AAAA,cACe,MADf,GAC+R,OAD/R,CACe,MADf;AAAA,cACe,iBADf,GAC+R,OAD/R,CACe,iBADf;AAAA,cACe,aADf,GAC+R,OAD/R,CACe,aADf;AAAA,cACe,qBADf,GAC+R,OAD/R,CACe,qBADf;AAAA,cACe,WADf,GAC+R,OAD/R,CACe,WADf;AAAA,cACe,aADf,GAC+R,OAD/R,CACe,aADf;AAAA,cACe,oBADf,GAC+R,OAD/R,CACe,oBADf;AAAA,cACe,mBADf,GAC+R,OAD/R,CACe,mBADf;AAAA,cACe,YADf,GAC+R,OAD/R,CACe,YADf;AAAA,cACe,eADf,GAC+R,OAD/R,CACe,eADf;AAAA,cACe,UADf,GAC+R,OAD/R,CACe,UADf;AAAA,cACe,cADf,GAC+R,OAD/R,CACe,cADf;AAAA,cACe,oBADf,GAC+R,OAD/R,CACe,oBADf;;AAEA,cAAA,cAAA,EAAA;AACA,iBAAA,UAAA,GAAA,OAAA,CAAA,cAAA,CAAA,YAAA,IAAA,EAAA;AACA;;AACA,cAAA,iBAAA,EAAA;AACA,gBAAA,CAAA,iBAAA,CAAA,YAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,YAAA,CAAA,EAAA;AACA;AACA,aAFA,MAGA;AACA,mBAAA,YAAA,CAAA,qBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA,YAAA,IAAA,EAAA;AACA;AACA,WAZA,CAaA;;;AACA,cAAA,QAAA,IAAA,QAAA,CAAA,YAAA,EAAA;AACA,iBAAA,YAAA,CAAA,qBAAA,GAAA,QAAA,CAAA,YAAA;AACA;;AACA,cAAA,MAAA,EAAA;AACA,iBAAA,YAAA,CAAA,MAAA,GAAA,MAAA,CAAA,YAAA;AACA;;AACA,cAAA,MAAA,EAAA;AACA,iBAAA,YAAA,CAAA,MAAA,GAAA,MAAA,CAAA,YAAA;AACA;;AACA,cAAA,iBAAA,EAAA;AACA,iBAAA,YAAA,CAAA,iBAAA,GAAA,iBAAA,CAAA,YAAA;AACA;;AACA,cAAA,aAAA,EAAA;AACA,iBAAA,YAAA,CAAA,aAAA,GAAA,aAAA,CAAA,YAAA;AACA;;AACA,cAAA,qBAAA,EAAA;AACA,iBAAA,YAAA,CAAA,qBAAA,GAAA,qBAAA,CAAA,YAAA;AACA;;AACA,cAAA,WAAA,EAAA;AACA,iBAAA,YAAA,CAAA,WAAA,GAAA,WAAA,CAAA,YAAA;AACA;;AACA,cAAA,aAAA,EAAA;AACA,iBAAA,YAAA,CAAA,aAAA,GAAA,aAAA,CAAA,YAAA;AACA;;AACA,cAAA,oBAAA,EAAA;AACA,iBAAA,YAAA,CAAA,oBAAA,GAAA,oBAAA,CAAA,YAAA;AACA;;AACA,cAAA,mBAAA,EAAA;AACA,iBAAA,YAAA,CAAA,mBAAA,GAAA,mBAAA,CAAA,YAAA;AACA;;AACA,cAAA,YAAA,EAAA;AACA,iBAAA,YAAA,CAAA,YAAA,GAAA,YAAA,CAAA,YAAA;AACA;;AACA,cAAA,eAAA,EAAA;AACA,iBAAA,YAAA,CAAA,eAAA,GAAA,eAAA,CAAA,YAAA;AACA;;AACA,cAAA,UAAA,EAAA;AACA,iBAAA,YAAA,CAAA,UAAA,GAAA,UAAA,CAAA,YAAA;AACA;;AACA,cAAA,cAAA,EAAA;AACA,iBAAA,YAAA,CAAA,cAAA,GAAA,cAAA,CAAA,YAAA;AACA;;AACA,cAAA,oBAAA,EAAA;AACA,iBAAA,YAAA,CAAA,qBAAA,GAAA,KAAA,YAAA,CAAA,qBAAA,CAAA,MAAA;AAAA;AACA;AACA;AACA;AACA,sBAAA,CAAA;AAAA,qBAAA,CAAA,KAAA,GAAA;AAAA,aAJA,CAAA;AAKA;;AACA,eAAA,UAAA;AACA,S,CACA;;AACA;AACA;AACA;AACA;;;;wCACsB;AAAA;;AAAA,cAAR,KAAQ,SAAR,KAAQ;;AACtB,cAAA,CAAA,KAAA,YAAA,CAAA,UAAA,EAAA;AACA,mBAAA,IAAA;AACA;;AACA,cAAA,KAAA,YAAA,CAAA,OAAA,EAAA;AACA,mBAAA,KAAA,sBAAA,CAAA,KAAA,CAAA;AACA;;AACA,cAAA,KAAA,UAAA,CAAA,UAAA,CAAA,WAAA,CAAA,EAAA;AACA,mBAAA,IAAA;AACA;;AACA,cAAA,iBAAA,CAAA,QAAA,CAAA,KAAA,UAAA,CAAA,EAAA;AACA,mBAAA,IAAA;AACA;;AACA,cAAA,KAAA,YAAA,CAAA,eAAA,EAAA;AACA,mBAAA,IAAA;AACA;;AACA,cAAA,SAAA,CAAA,QAAA,CAAA,KAAA,UAAA,CAAA,EAAA;AACA,mBAAA,KAAA,aAAA,CAAA,KAAA,CAAA;AACA;;AACA,cAAA,KAAA,IAAA,KAAA,CAAA,QAAA,GAAA,MAAA,IAAA,CAAA,EAAA;AACA;AACA,gBAAA,YAAA,GAAA,CAAA;;AAFA,uCAGA,GAHA;AAIA,kBAAA,MAAA,CAAA,YAAA,CAAA,qBAAA,CAAA,GAAA,EAAA,QAAA,IACA,MAAA,CAAA,YAAA,CAAA,qBAAA,CAAA,GAAA,EAAA,QAAA,KAAA,IADA,EACA;AACA,oBAAA,MAAA,CAAA,UAAA,CAAA,OAAA,CAAA,GAAA,MAAA,MAAA,CAAA,UAAA,CAAA,WAAA,CAAA,GAAA,CAAA,EAAA;AACA;AACA,sBAAA,GAAA,GAAA,MAAA,CAAA,UAAA,CACA,KADA,CACA,EADA,EAEA,MAFA;AAEA;AACA;AACA;AACA;AACA,4BAAA,CAAA;AAAA,2BAAA,CAAA,KAAA,GAAA;AAAA,mBANA,EAOA,IAPA,CAOA,EAPA,CAAA;;AAQA,kBAAA,YAAA,IAAA,GAAA,CAAA,MAAA;AACA,iBAXA,MAYA,IAAA,MAAA,CAAA,UAAA,CAAA,OAAA,CAAA,GAAA,MAAA,CAAA,CAAA,EAAA;AACA,kBAAA,YAAA;AACA;;AACA,oBAAA,MAAA,CAAA,UAAA,CAAA,OAAA,CAAA,GAAA,MAAA,CAAA,CAAA,IAAA,KAAA,CAAA,QAAA,GAAA,MAAA,IAAA,MAAA,CAAA,UAAA,CAAA,OAAA,CAAA,GAAA,CAAA,EAAA;AACA;AAAA,uBAAA;AAAA;AACA;;AACA,oBAAA,YAAA,KAAA,MAAA,CAAA,UAAA,CAAA,MAAA,EAAA;AACA;AAAA,uBAAA;AAAA;AACA;AACA;AA3BA;;AAGA,iBAAA,IAAA,GAAA,IAAA,KAAA,YAAA,CAAA,qBAAA,EAAA;AAAA,+BAAA,GAAA;;AAAA;AAyBA;;AACA,gBAAA,KAAA,UAAA,CAAA,OAAA,CAAA,GAAA,MAA0C,CAA1C,IACA,KAAA,CAAA,QAAA,GAAA,MAAA,KAAA,KAAA,UAAA,CAAA,MAAA,GAAA,MAAA,CAAA,KAAA,UAAA,CAAA,KAAA,CAAA,GAAA,EAAoG,CAApG,EAAoG,KAApG,CAAoG,GAApG,EAAkH,CAAlH,CAAA,CAAA,GAAkH,CADlH,EACkH;AAClH,qBAAA,IAAA;AACA;;AACA,gBAAA,KAAA,UAAA,CAAA,OAAA,CAAA,GAAA,MAAA,CAAA,IAAA,KAAA,UAAA,CAAA,OAAA,CAAA,GAAA,MAAA,CAAA,EAAA;AACA,qBAAA,IAAA;AACA,aAFA,MAGA,IAAA,KAAA,UAAA,CAAA,OAAA,CAAA,GAAA,IAAA,CAAA,IAAA,KAAA,CAAA,QAAA,GAAA,MAAA,GAAA,KAAA,UAAA,CAAA,OAAA,CAAA,GAAA,CAAA,IACA,KAAA,UAAA,CAAA,OAAA,CAAA,GAAA,IAAA,CAAA,IAAA,KAAA,CAAA,QAAA,GAAA,MAAA,GAAA,KAAA,UAAA,CAAA,OAAA,CAAA,GAAA,CADA,IAEA,KAAA,UAAA,CAAA,OAAA,CAAA,GAAA,MAA0C,CAF1C,EAE0C;AAC1C,qBAAA,KAAA,sBAAA,CAAA,KAAA,CAAA;AACA;;AACA,gBAAA,KAAA,UAAA,CAAA,OAAA,CAAA,GAAA,MAAA,CAAA,CAAA,IAAA,KAAA,UAAA,CAAA,OAAA,CAAA,GAAA,MAAA,CAAA,CAAA,EAAA;AACA;AACA,kBAAA,MAAA,GAAA,KAAA,YAAA,CAAA,qBAAA,GACA,KAAA,UAAA,CAAA,MAAA,GAAA,KAAA,YAAA,CAAA,sBAAA,CAAA,KAAA,UAAA,CAAA,GAAA,YADA,GAEA,KAAA,UAAA,CAAA,MAAA,GAAA,YAFA;;AAGA,kBAAA,KAAA,CAAA,QAAA,GAAA,MAAA,GAAA,MAAA,EAAA;AACA,uBAAA,KAAA,sBAAA,CAAA,KAAA,CAAA;AACA;AACA;AACA;;AACA,iBAAA,IAAA;AACA;AACA;AACA;AACA;AACA;;;;gCACA,C,EAAA;AACA;AACA,cAAA,EAAA;AAAA;AAAiC,UAAA,CAAA,CAAA,MAAjC;AACA,eAAA,WAAA,GAAA,EAAA,CAAA,KAAA;;AACA,cAAA,CAAA,KAAA,UAAA,EAAA;AACA,iBAAA,QAAA,CAAA,EAAA,CAAA,KAAA;AACA;AACA;AACA;;;AACA,cAAA,QAAA,GAAA,EAAA,CAAA,cAAA,KAAA,CAAA;AACA;AAA6B,UAAA,EAAA,CAAA,cAA7B,GAA6B,KAAA,YAAA,CAAA,MAAA,CAAA,MAD7B;AAEA;AAA6B,UAAA,EAAA,CAAA,cAF7B;AAGA;;AACA,cAAA,UAAA,GAAA,CAAA;AACA;;AACA,cAAA,cAAA,GAAA,KAAA;;AACA,eAAA,YAAA,CAAA,iBAAA,CAAA,QAAA;AAAA;AACA;AACA;AACA;AACA;AACA,oBAAA,KAAA,EAAA,eAAA,EAAA;AACA,YAAA,UAAA,GAAA,KAAA;AACA,YAAA,cAAA,GAAA,eAAA;AACS,WART,EAhBA,CAyBA;;;AACA,cAAA,KAAA,QAAA,CAAA,aAAA,KAAA,EAAA,EAAA;AACA;AACA;;AACA,eAAA,SAAA,GAAA,KAAA,SAAA,KAAA,CAAA,IAAA,KAAA,WAAA,CAAA,MAAA,KAAA,CAAA,GAAA,IAAA,GAAA,KAAA,SAAA;AACA;;AACA,cAAA,eAAA,GAAA,KAAA,SAAA,GACA,KAAA,WAAA,CAAA,MAAA,GAAA,QAAA,GAAA,UADA,GAEA,QAAA,IAAA,KAAA,KAAA,KAAA,WAAA,IAAA,CAAA,cAAA,GAAA,CAAA,GAAA,UAAA,CAFA;;AAGA,cAAA,eAAA,GAAA,KAAA,qBAAA,EAAA,EAAA;AACA,YAAA,eAAA,GAAA,KAAA,qBAAA,EAAA;AACA;;AACA,UAAA,EAAA,CAAA,iBAAA,CAAA,eAAA,EAAA,eAAA;;AACA,cAAA,CAAA,KAAA,cAAA,CAAA,QAAA,CAAA,GAAA,KAAA,KAAA,cAAA,CAAA,QAAA,CAAA,GAAA,CAAA,KAAA,UAAA,KAAA,CAAA,EAAA;AACA,YAAA,EAAA,CAAA,iBAAA;AAAA;AAAgD,YAAA,EAAA,CAAA,cAAhD,GAAgD,CAAhD;AAAgD;AAA8C,YAAA,EAAA,CAAA,cAA9C,GAA8C,CAA9F;AACA;;AACA,eAAA,SAAA,GAAA,IAAA;AACA;AACA;AACA;AACA;;;;iCACA;AACA,eAAA,YAAA,CAAA,iBAAA;;AACA,eAAA,OAAA;AACA;AACA;AACA;AACA;AACA;;;;gCACA,C,EAAA;AACA;AACA,cAAA,EAAA;AAAA;AAAiC,UAAA,CAAA,CAAA,MAAjC;AACA;;AACA,cAAA,QAAA,GAAA,CAAA;AACA;;AACA,cAAA,MAAA,GAAA,CAAA;AACA,cAAA,EAAA,KAAA,IAAA,IACA,EAAA,CAAA,cAAA,KAAA,IADA,IAEA,EAAA,CAAA,cAAA,KAAA,EAAA,CAAA,YAFA,IAGA,EAAA,CAAA,cAAA,GAAA,KAAA,YAAA,CAAA,MAAA,CAAA,MAHA,IAIA;;AACA;AAA2B,UAAA,CAA3B,CAA2B,OAA3B,KAA2B,EAL3B,EAMA,IAAA,KAAA,YAAA,CAAA,aAAA,EAAA;AACA;AACA,iBAAA,YAAA,CAAA,WAAA,GAAA,KAAA,YAAA,CAAA,eAAA,EAAA;;AACA,gBAAA,EAAA,CAAA,iBAAA,IAAA,KAAA,YAAA,CAAA,MAAA,GAAA,KAAA,YAAA,CAAA,WAAA,KAAA,EAAA,CAAA,KAAA,EAAA;AACA;AACA,cAAA,EAAA,CAAA,KAAA;AACA,cAAA,EAAA,CAAA,iBAAA,CAAA,QAAA,EAAA,MAAA;AACA,aAJA,MAKA;AACA;AACA,kBAAA,EAAA,CAAA,cAAA,GAAA,KAAA,YAAA,CAAA,WAAA,CAAA,MAAA,EAAA;AACA;AACA,gBAAA,EAAA,CAAA,iBAAA,CAAA,KAAA,YAAA,CAAA,WAAA,CAAA,MAAA,EAAA,KAAA,YAAA,CAAA,WAAA,CAAA,MAAA;AACA;AACA;AACA;AACA;;AACA,cAAA,SAAA,GAAA,CAAA,EAAA,CAAA,KAAA,IAAA,EAAA,CAAA,KAAA,KAAA,KAAA,YAAA,CAAA,MAAA,GACA,KAAA,YAAA,CAAA,MAAA,GAAA,KAAA,YAAA,CAAA,WADA,GAEA,EAAA,CAAA,KAFA;AAGA;;AACA,cAAA,EAAA,CAAA,KAAA,KAAA,SAAA,EAAA;AACA,YAAA,EAAA,CAAA,KAAA,GAAA,SAAA;AACA;AACA;;;AACA,cAAA;AAAA;AAA4B,UAAA,EAAA,CAAA,cAA5B;AAA4B;AAA4C,UAAA,EAAA,CAAA,YAAxE,KAAwE,KAAA,YAAA,CAAA,MAAA,CAAA,MAAxE,EAAwE;AACxE,YAAA,EAAA,CAAA,cAAA,GAAA,KAAA,YAAA,CAAA,MAAA,CAAA,MAAA;AACA;AACA;AACA;;;AACA;AAAA;AAA2B,UAAA,EAAA,CAAA,YAA3B,GAA2B,KAAA,qBAAA,EAA3B,EAA2B;AAC3B,YAAA,EAAA,CAAA,YAAA,GAAA,KAAA,qBAAA,EAAA;AACA;AACA,S,CACA;;AACA;AACA;AACA;AACA;;;;kCACA,C,EAAA;AACA,eAAA,KAAA,GAAA,CAAA,CAAA,IAAA,GAAA,CAAA,CAAA,IAAA,GAAA,CAAA,CAAA,GAAA;AACA;;AACA,cAAA,EAAA;AAAA;AAAiC,UAAA,CAAA,CAAA,MAAjC;AACA,eAAA,WAAA,GAAA,EAAA,CAAA,KAAA;;AACA,cAAA,CAAA,CAAA,OAAA,KAAA,EAAA,EAAA;AACA,YAAA,CAAA,CAAA,cAAA;AACA;;AACA,cAAA,CAAA,CAAA,OAAA,KAAA,EAAA,IAAA,CAAA,CAAA,OAAA,KAAA,CAAA,IAAA,CAAA,CAAA,OAAA,KAAA,EAAA,EAAA;AACA,gBAAA,CAAA,CAAA,OAAA,KAAA,CAAA,IAAA,EAAA,CAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,cAAA,EAAA,CAAA,cAAA,GAAA,EAAA,CAAA,YAAA;AACA;;AACA,gBAAA,CAAA,CAAA,OAAA,KAAA,CAAA;AAAA;AAAkD,YAAA,EAAA,CAAA,cAAlD,KAAkD,CAAlD,EAAkD;AAClD;AACA,mBAAA,iBAAA,GAAA,KAAA,iBAAA,IAAA,KAAA,OAAA,CAAA,iBAAA;;AACA,kBAAA,KAAA,MAAA,CAAA,MAAA,GAAA,CAAA;AAAA;AAA6D,cAAA,EAAA,CAAA,cAA7D,IAA6D,KAAA,MAAA,CAAA,MAA7D,EAA6D;AAC7D,gBAAA,EAAA,CAAA,iBAAA,CAAA,KAAA,MAAA,CAAA,MAAA,EAAA,KAAA,MAAA,CAAA,MAAA;AACA,eAFA,MAGA;AACA,oBAAA,KAAA,WAAA,CAAA,MAAA;AAAA;AAAmE,gBAAA,EAAA,CAAA,cAAnE;AAAmE;AAA4C,gBAAA,EAAA,CAAA,cAA5C,KAA4C,CAA/G,EAA+G;AAC/G,yBAAA,KAAA,iBAAA,CAAA,QAAA,CAAA,KAAA,WAAA;AAAA;AAA+F,kBAAA,EAAA,CAAA,cAA/F,GAA+F,CAA/F,EAA+F,QAA/F,EAAA,MACA,KAAA,MAAA,CAAA,MAAA,IAAA,CAAA;AAAA;AAAwE,kBAAA,EAAA,CAAA,cAAxE,GAAwE,KAAA,MAAA,CAAA,MAAxE,IACA,KAAA,MAAA,CAAA,MAAA,KAAA,CAFA,CAAA,EAEA;AACA,oBAAA,EAAA,CAAA,iBAAA;AAAA;AAAgE,oBAAA,EAAA,CAAA,cAAhE,GAAgE,CAAhE;AAAgE;AAA8C,oBAAA,EAAA,CAAA,cAA9C,GAA8C,CAA9G;AACA;AACA;;AACA,qBAAA,wBAAA,CAAA,CAAA,CAAA,OAAA,EAAA,EAAA;AACA;AACA;;AACA,iBAAA,wBAAA,CAAA,CAAA,CAAA,OAAA,EAAA,EAAA;;AACA,gBAAA,KAAA,YAAA,CAAA,MAAA,CAAA,MAAA;AACA;AAA+B,YAAA,EAAA,CAAA,cAA/B,IAA+B,KAAA,YAAA,CAAA,MAAA,CAAA,MAD/B;AAEA;AAA+B,YAAA,EAAA,CAAA,YAA/B,IAA+B,KAAA,YAAA,CAAA,MAAA,CAAA,MAF/B,EAE+B;AAC/B,cAAA,CAAA,CAAA,cAAA;AACA;AACA;;;AACA,gBAAA,WAAA,GAAA,EAAA,CAAA,cAAA,CA5BA,CA6BA;;AACA,gBAAA,CAAA,CAAA,OAAA,KAAA,CAAA,IACA,CAAA,EAAA,CAAA,QADA,IAEA,WAAA,KAAA,CAFA,IAGA,EAAA,CAAA,YAAA,KAAA,EAAA,CAAA,KAAA,CAAA,MAHA,IAIA,EAAA,CAAA,KAAA,CAAA,MAAA,KAAA,CAJA,EAIA;AACA,mBAAA,SAAA,GAAA,KAAA,YAAA,CAAA,MAAA,GAAA,KAAA,YAAA,CAAA,MAAA,CAAA,MAAA,GAAA,CAAA;;AACA,mBAAA,YAAA,CAAA,SAAA,CAAA,KAAA,YAAA,CAAA,MAAA,EAAA,KAAA,YAAA,CAAA,cAAA,EAAA,KAAA,SAAA;AACA;AACA;;AACA,cAAA,CAAA,CAAA,KAAA,MAAA,IACA,KAAA,MAAA,CAAA,MAAA,GAAA,CADA,IAEA,KAAA,WAAA,CAAA,MAAA,GAAA,KAAA,MAAA,CAAA,MAAA;AAAA;AAA0E,UAAA,EAAA,CAAA,cAF1E,EAE0E;AAC1E,YAAA,EAAA,CAAA,iBAAA,CAAA,KAAA,WAAA,CAAA,MAAA,GAAA,KAAA,MAAA,CAAA,MAAA,EAAA,KAAA,WAAA,CAAA,MAAA;AACA,WAJA,MAKA,IAAA,CAAA,CAAA,OAAA,KAAA,EAAA,IAAA,CAAA,CAAA,OAAA,KAAA,IAAA,IAAA;AACA,UAAA,CAAA,CAAA,OAAA,KAAA,EAAA,IAAA,CAAA,CAAA,OAAA,KAAA,IADA,CACA;AADA,YAEA;AACA,cAAA,EAAA,CAAA,iBAAA,CAAA,CAAA,EAAA,KAAA,qBAAA,EAAA;AACA,cAAA,CAAA,CAAA,cAAA;AACA;;AACA,eAAA,YAAA,CAAA,QAAA,GAAA,EAAA,CAAA,cAAA;AACA,eAAA,YAAA,CAAA,MAAA,GAAA,EAAA,CAAA,YAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;mCACA,U,EAAA;AACA,iBAAe,MAAA,CAAA,kCAAA,CAAA,WAAA,CAAA,CAAA,CAAS,IAAT,EAAS,KAAA,CAAT,EAAS,KAAA,CAAT;AAAA;;AAAS;AAAT,kCAA0D;AAAA;AAAA;AAAA;AAAA;AACzE,wBAAA,UAAA,KAAA,SAAA,EAAA;AACA,sBAAA,UAAA,GAAA,EAAA;AACA;;AACA,wBAAA,OAAA,UAAA,KAAA,QAAA,EAAA;AACA,sBAAA,UAAA,GAAA,MAAA,CAAA,UAAA,CAAA;AACA,sBAAA,UAAA,GAAA,KAAA,aAAA,KAAA,GAAA,GAAA,UAAA,CAAA,OAAA,CAAA,GAAA,EAAA,KAAA,aAAA,CAAA,GAAA,UAAA;AACA,2BAAA,YAAA,CAAA,aAAA,GAAA,IAAA;AACA;;AACA,oBAAA,UAAA,IAAA,KAAA,YAAA,CAAA,cAAA,IACA,KAAA,YAAA,CAAA,cAAA,KAAA,KAAA,YAAA,CAAA,MAAA,IAAA,KAAA,YAAA,CAAA,aAAA,CADA,GAEA,KAAA,YAAA,CAAA,mBAAA,GAAA,CACA,OADA,EAEA,KAAA,YAAA,CAAA,SAAA,CAAA,UAAA,EAAA,KAAA,YAAA,CAAA,cAAA,CAFA,CAFA,GAMA,KAAA,YAAA,CAAA,mBAAA,GAAA,CAAA,OAAA,EAAA,UAAA,CANA;AAOA,yBAAA,WAAA,GAAA,UAAA;;AAhByE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA1D,EAAf;AAkBA;AACA;AACA;AACA;AACA;;;;yCACA,E,EAAA;AACA,eAAA,QAAA,GAAA,EAAA;AACA,eAAA,YAAA,CAAA,QAAA,GAAA,KAAA,QAAA;AACA;AACA;AACA;AACA;AACA;;;;0CACA,E,EAAA;AACA,eAAA,OAAA,GAAA,EAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iDACA,O,EAAA,E,EAAA;AACA,cAAA,OAAA,KAAA,EAAA,IAAA,KAAA,MAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,gBAAA,KAAA,WAAA,CAAA,MAAA,GAAA,KAAA,MAAA,CAAA,MAAA;AAAA;AAA+E,YAAA,EAAA,CAAA,cAA/E,EAA+E;AAC/E,cAAA,EAAA,CAAA,iBAAA,CAAA,KAAA,WAAA,CAAA,MAAA,GAAA,KAAA,MAAA,CAAA,MAAA,EAAA,KAAA,WAAA,CAAA,MAAA;AACA;AACA;;AACA,cAAA,OAAA,KAAA,CAAA,EAAA;AACA,gBAAA,KAAA,MAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,WAAA,CAAA,MAAA,GAAA,KAAA,MAAA,CAAA,MAAA;AAAA;AAAwG,YAAA,EAAA,CAAA,cAAxG,EAAwG;AACxG,cAAA,EAAA,CAAA,iBAAA,CAAA,KAAA,WAAA,CAAA,MAAA,GAAA,KAAA,MAAA,CAAA,MAAA,EAAA,KAAA,WAAA,CAAA,MAAA;AACA;;AACA,gBAAA,KAAA,MAAA,CAAA,MAAA,KAAA,CAAA,IAAA,KAAA,WAAA,CAAA,MAAA;AAAA;AAAuF,YAAA,EAAA,CAAA,cAAvF,EAAuF;AACvF,cAAA,EAAA,CAAA,iBAAA;AAAA;AAAoD,cAAA,EAAA,CAAA,cAApD,GAAoD,CAApD;AAAoD;AAA8C,cAAA,EAAA,CAAA,cAA9C,GAA8C,CAAlG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;yCACA,U,EAAA;AACA,eAAA,YAAA,CAAA,mBAAA,GAAA,CAAA,UAAA,EAAA,UAAA,CAAA;AACA;AACA;AACA;AACA;AACA;;;;sCACA,C,EAAA;AACA,cAAA,CAAA,CAAA,EAAA;AACA,iBAAA,YAAA,CAAA,WAAA,GAAA,EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;8CACA,O,EAAA;AAAA;;AACA,iBAAA,OAAA,CAAA,KAAA,CAAA,UAAA,KACA,OAAA,CAAA,KAAA,CAAA,EAAA,EAAA,MAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAA,KAAA,EAAA,OAAA,EAAA,KAAA,EAAA;AACA,YAAA,MAAA,CAAA,MAAA,GAAA,OAAA,KAAA,GAAA,GAA4C,KAA5C,GAA4C,MAAA,CAAA,MAA5C;;AACA,gBAAA,OAAA,KAAA,GAAA,EAAkC;AAClC,qBAAA,MAAA,CAAA,YAAA,CAAA,gBAAA,CAAA,OAAA,IAAA,KAAA,GAAA,OAAA,GAAA,KAAA;AACA;;AACA,YAAA,MAAA,CAAA,IAAA,GAAA,KAAA;AACA;;AACA,gBAAA,YAAA,GAAA,MAAA,CAAA,OAAA,CAAA,KAAA,CAAA,MAAA,CAAA,MAAA,GAAA,CAAA,EAAA,MAAA,CAAA,IAAA,CAAA,CAAA;AACA;;AACA,gBAAA,UAAA,GAAA,IAAA,KAAA,CAAA,YAAA,GAAA,CAAA,EAAA,IAAA,CAAA,OAAA,CAAA,MAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA;AACA,mBAAA,KAAA,GAAA,UAAA;AACa,WAjBb,EAiBa,EAjBb,CADA,IAmBA,OAnBA;AAoBA,S,CACA;;AACA;AACA;AACA;AACA;;;;qCACA;AACA,eAAA,YAAA,CAAA,cAAA,GAAA,KAAA,qBAAA,CAAA,KAAA,UAAA,IAAA,EAAA,CAAA;AACA,eAAA,YAAA,CAAA,mBAAA,GAAA,CACA,OADA,EAEA,KAAA,YAAA,CAAA,SAAA,CAAA,KAAA,WAAA,EAAA,KAAA,YAAA,CAAA,cAAA,CAFA,CAAA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;sCACA,K,EAAA;AACA;AACA,cAAA,UAAA,GAAA,KAAA,UAAA,CAAA,KAAA,CAAA,EAAA,EAAA,MAAA;AAAA;AACA;AACA;AACA;AACA,oBAAA,CAAA;AAAA,mBAAA,CAAA,KAAA,GAAA;AAAA,WAJA,EAIA,MAJA;;AAKA,cAAA,KAAA,KAAA,IAAA,IAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,mBAAA,IAAA,CADA,CACwB;AACxB;;AACA,cAAA,CAAA,KAAA,CAAA,KAAA,CAAA,MAAA,GAAA,CAAA,CAAA,KAAA,CAAA,IAAA,KAAA,CAAA,MAAA,GAAA,UAAA,IAAA,KAAA,CAAA,MAAA,IAAA,UAAA,GAAA,CAAA,EAAA;AACA,mBAAA,KAAA,sBAAA,CAAA,KAAA,CAAA;AACA;;AACA,iBAAA,IAAA;AACA;AACA;AACA;AACA;AACA;;;;gDACA;AACA,iBAAA,KAAA,YAAA,CAAA,WAAA,CAAA,MAAA,IAAA,KAAA,YAAA,CAAA,WAAA,CAAA,MAAA,GAAA,KAAA,YAAA,CAAA,MAAA,CAAA,MAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;+CACA,W,EAAA;AACA,iBAAA;AACA,YAAA,IAAA,EAAA;AACA,cAAA,YAAA,EAAA,KAAA,UADA;AAEA,cAAA,WAAA,EAAA;AAFA;AADA,WAAA;AAMA;;;;;;AAEA,IAAA,aAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAZ;AAAqB,MAAA,IAAA,EAAA,CAAA;AACrB,QAAA,QAAA,EAAA,QADqB;AAErB,QAAA,SAAA,EAAA,CACA;AACA,UAAA,OAAA,EAAiC,2CAAA,CAAA,mBAAA,CADjC;AAEA,UAAA,WAAA,EAAqC,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAA;AAAU;AAC/C;AACA;AACA;AAAA,mBAAA,aAAA;AAAA,WAHqC,CAFrC;AAMA,UAAA,KAAA,EAAA;AANA,SADA,EASA;AACA,UAAA,OAAA,EAAiC,2CAAA,CAAA,eAAA,CADjC;AAEA,UAAA,WAAA,EAAqC,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAA;AAAU;AAC/C;AACA;AACA;AAAA,mBAAA,aAAA;AAAA,WAHqC,CAFrC;AAMA,UAAA,KAAA,EAAA;AANA,SATA,EAiBA,WAjBA;AAFqB,OAAA;AAArB,KADA,CAAA;AAwBA;;AACA,IAAA,aAAA,CAAA,cAAA,GAAA;AAAA,aAAA,CACA;AAAK,QAAA,IAAA,EAAA,SAAL;AAAK,QAAA,UAAA,EAAA,CAAA;AAAgC,UAAA,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAvC;AAA6C,UAAA,IAAA,EAAA,CAAS,4CAAA,CAAA,UAAA,CAAT;AAA7C,SAAA;AAAL,OADA,EAEA;AAAK,QAAA,IAAA,EAAA;AAAL,OAFA,EAGA;AAAK,QAAA,IAAA,EAAA,SAAL;AAAK,QAAA,UAAA,EAAA,CAAA;AAAgC,UAAA,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAvC;AAA6C,UAAA,IAAA,EAAA,CAAA,MAAA;AAA7C,SAAA;AAAL,OAHA,CAAA;AAAA,KAAA;;AAKA,IAAA,aAAA,CAAA,cAAA,GAAA;AACA,MAAA,cAAA,EAAA,CAAA;AAAsB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA,CAA7B;AAAkC,QAAA,IAAA,EAAA,CAAA,MAAA;AAAlC,OAAA,CADA;AAEA,MAAA,iBAAA,EAAA,CAAA;AAAyB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAAhC,OAAA,CAFA;AAGA,MAAA,QAAA,EAAA,CAAA;AAAgB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAAvB,OAAA,CAHA;AAIA,MAAA,MAAA,EAAA,CAAA;AAAc,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAArB,OAAA,CAJA;AAKA,MAAA,MAAA,EAAA,CAAA;AAAc,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAArB,OAAA,CALA;AAMA,MAAA,iBAAA,EAAA,CAAA;AAAyB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAAhC,OAAA,CANA;AAOA,MAAA,aAAA,EAAA,CAAA;AAAqB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAA5B,OAAA,CAPA;AAQA,MAAA,qBAAA,EAAA,CAAA;AAA6B,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAApC,OAAA,CARA;AASA,MAAA,WAAA,EAAA,CAAA;AAAmB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAA1B,OAAA,CATA;AAUA,MAAA,aAAA,EAAA,CAAA;AAAqB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAA5B,OAAA,CAVA;AAWA,MAAA,oBAAA,EAAA,CAAA;AAA4B,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAAnC,OAAA,CAXA;AAYA,MAAA,mBAAA,EAAA,CAAA;AAA2B,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAAlC,OAAA,CAZA;AAaA,MAAA,YAAA,EAAA,CAAA;AAAoB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAA3B,OAAA,CAbA;AAcA,MAAA,eAAA,EAAA,CAAA;AAAuB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAA9B,OAAA,CAdA;AAeA,MAAA,UAAA,EAAA,CAAA;AAAkB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAAzB,OAAA,CAfA;AAgBA,MAAA,cAAA,EAAA,CAAA;AAAsB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAA7B,OAAA,CAhBA;AAiBA,MAAA,oBAAA,EAAA,CAAA;AAA4B,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAAnC,OAAA,CAjBA;AAkBA,MAAA,OAAA,EAAA,CAAA;AAAe,QAAA,IAAA,EAAO,0CAAA,CAAA,cAAA,CAAtB;AAAkC,QAAA,IAAA,EAAA,CAAA,OAAA,EAAA,CAAA,QAAA,CAAA;AAAlC,OAAA,CAlBA;AAmBA,MAAA,MAAA,EAAA,CAAA;AAAc,QAAA,IAAA,EAAO,0CAAA,CAAA,cAAA,CAArB;AAAiC,QAAA,IAAA,EAAA,CAAA,MAAA;AAAjC,OAAA,CAnBA;AAoBA,MAAA,OAAA,EAAA,CAAA;AAAe,QAAA,IAAA,EAAO,0CAAA,CAAA,cAAA,CAAtB;AAAkC,QAAA,IAAA,EAAA,CAAA,OAAA,EAAA,CAAA,QAAA,CAAA;AAAlC,OAAA,CApBA;AAqBA,MAAA,SAAA,EAAA,CAAA;AAAiB,QAAA,IAAA,EAAO,0CAAA,CAAA,cAAA,CAAxB;AAAoC,QAAA,IAAA,EAAA,CAAA,SAAA,EAAA,CAAA,QAAA,CAAA;AAApC,OAAA,CArBA;AAsBA,MAAA,aAAA,EAAA,CAAA;AAAqB,QAAA,IAAA,EAAO,0CAAA,CAAA,cAAA,CAA5B;AAAwC,QAAA,IAAA,EAAA,CAAA,eAAA,EAAA,CAAA,QAAA,CAAA;AAAxC,OAAA;AAtBA,KAAA;;AAwBA,QAAA,KAAA,EAAW,CAoFV;AAED;AACA;AACA;AACA;;;QACA,Q;AACA;AACA;AACA;AACA,wBAAA,YAAA,EAAA;AAAA;;AACA,aAAA,YAAA,GAAA,YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;kCACA,K,EAAA,I,EAAA;AAAA,cAAA,iBAAA,uEAAA,IAAA;;AACA,cAAA,CAAA,KAAA,IAAA,OAAA,KAAA,KAAA,QAAA,EAAA;AACA,mBAAA,EAAA;AACA;;AACA,cAAA,iBAAA,EAAA;AACA,iBAAA,YAAA,CAAA,iBAAA,GAAA,iBAAA;AACA;;AACA,cAAA,OAAA,IAAA,KAAA,QAAA,EAAA;AACA,mBAAA,KAAA,YAAA,CAAA,SAAA,WAAkD,KAAlD,GAAwD,IAAxD,CAAA;AACA;;AACA,iBAAA,KAAA,YAAA,CAAA,oBAAA,WAAyD,KAAzD,GAA+D,IAA/D,CAAA;AACA;;;;;;AAEA,IAAA,QAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,MAAA,CAAZ;AAAgB,MAAA,IAAA,EAAA,CAAA;AAChB,QAAA,IAAA,EAAA,MADgB;AAEhB,QAAA,IAAA,EAAA;AAFgB,OAAA;AAAhB,KADA,CAAA;AAMA;;AACA,IAAA,QAAA,CAAA,cAAA,GAAA;AAAA,aAAA,CACA;AAAK,QAAA,IAAA,EAAA;AAAL,OADA,CAAA;AAAA,KAAA;;AAGA,QAAA,KAAA,EAAW,CAMV;AAED;AACA;AACA;AACA;;;QACA,a;;;;;;;;AACA;AACA;AACA;AACA;gCACA,W,EAAA;AACA,iBAAA;AACA,YAAA,QAAA,EAAA,aADA;AAEA,YAAA,SAAA,EAAA,CACA;AACA,cAAA,OAAA,EAAA,UADA;AAEA,cAAA,QAAA,EAAA;AAFA,aADA,EAKA;AACA,cAAA,OAAA,EAAA,cADA;AAEA,cAAA,QAAA,EAAA;AAFA,aALA,EASA;AACA,cAAA,OAAA,EAAA,MADA;AAEA,cAAA,UAAA,EAAA,cAFA;AAGA,cAAA,IAAA,EAAA,CAAA,cAAA,EAAA,UAAA;AAHA,aATA,EAcA,kBAdA;AAFA,WAAA;AAmBA;AACA;AACA;AACA;AACA;;;;iCACA,Y,EAAA;AACA,iBAAA;AACA,YAAA,QAAA,EAAA;AADA,WAAA;AAGA;;;;;;AAEA,IAAA,aAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,UAAA,CAAZ;AAAoB,MAAA,IAAA,EAAA,CAAA;AACpB,QAAA,OAAA,EAAA,CAAA,aAAA,EAAA,QAAA,CADoB;AAEpB,QAAA,YAAA,EAAA,CAAA,aAAA,EAAA,QAAA;AAFoB,OAAA;AAApB,KADA,CAAA;AAMA;AACA;AACA;AACA;AACA;AACA;;AACA,aAAA,cAAA,CAAA,UAAA,EAAA,WAAA,EAAA;AACA,aAAA,WAAA,YAAA,QAAA,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAA6D,UAA7D,EAA6D,WAAA,EAA7D,CAAA,GAA6D,MAAA,CAAA,MAAA,CAAA,EAAA,EAA+C,UAA/C,EAA+C,WAA/C,CAA7D;AACA;;AAEA,QAAA,cAAA,GAAA,OAAA,UAAA,KAAA,WAAA,GAAA,UAAA,GAAA,OAAA,MAAA,KAAA,WAAA,GAAA,MAAA,GAAA,OAAA,MAAA,KAAA,WAAA,GAAA,MAAA,GAAA,OAAA,IAAA,KAAA,WAAA,GAAA,IAAA,GAAA,EAAA;;AAEA,aAAA,eAAA,GAAA;AACA,YAAA,IAAA,KAAA,CAAA,wEAAA,CAAA;AACA;;AAEA,aAAA,aAAA,CAAA,CAAA,EAAA;AACA,aAAA,CAAA,IAAA,CAAA,CAAA,UAAA,IAAA,MAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,CAAA,EAAA,SAAA,CAAA,GAAA,CAAA,CAAA,SAAA,CAAA,GAAA,CAAA;AACA;;AAEA,aAAA,oBAAA,CAAA,EAAA,EAAA,MAAA,EAAA;AACA,aAAA,MAAA,GAAA;AAAkB,QAAA,OAAA,EAAA;AAAlB,OAAA,EAAgC,EAAA,CAAA,MAAA,EAAA,MAAA,CAAA,OAAA,CAAhC,EAAgC,MAAA,CAAA,OAAhC;AACA;;AAEA,aAAA,yBAAA,CAAA,CAAA,EAAA;AACA,aAAA,CAAA,IAAA,CAAA,CAAA,SAAA,CAAA,IAAA,CAAA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AACA;AACA,gBAAA;AACA,UAAA,CAAA,cAAA,CAAA,aAAA,EAAA;AACA,QAAA,cAAA,CAAA,aAAA;AAAA;AACA;AACA;AACA;AACA;AACA,kBAAA,UAAA,EAAA,KAAA,EAAA,CAAwC,CALxC;AAMA;AACC,KAZD;;AAeA,QAAA,mBAAA,GAAA,EAAA;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAGA","sourcesContent":["import { InjectionToken, Injectable, Inject, ElementRef, Renderer2, Directive, forwardRef, Input, HostListener, Pipe, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction IConfig() { }\nif (false) {\n    /** @type {?} */\n    IConfig.prototype.suffix;\n    /** @type {?} */\n    IConfig.prototype.prefix;\n    /** @type {?} */\n    IConfig.prototype.thousandSeparator;\n    /** @type {?} */\n    IConfig.prototype.decimalMarker;\n    /** @type {?} */\n    IConfig.prototype.clearIfNotMatch;\n    /** @type {?} */\n    IConfig.prototype.showTemplate;\n    /** @type {?} */\n    IConfig.prototype.showMaskTyped;\n    /** @type {?} */\n    IConfig.prototype.placeHolderCharacter;\n    /** @type {?} */\n    IConfig.prototype.shownMaskExpression;\n    /** @type {?} */\n    IConfig.prototype.dropSpecialCharacters;\n    /** @type {?} */\n    IConfig.prototype.specialCharacters;\n    /** @type {?} */\n    IConfig.prototype.hiddenInput;\n    /** @type {?} */\n    IConfig.prototype.validation;\n    /** @type {?} */\n    IConfig.prototype.separatorLimit;\n    /** @type {?} */\n    IConfig.prototype.allowNegativeNumbers;\n    /** @type {?} */\n    IConfig.prototype.patterns;\n}\n/** @type {?} */\nconst config = new InjectionToken('config');\n/** @type {?} */\nconst NEW_CONFIG = new InjectionToken('NEW_CONFIG');\n/** @type {?} */\nconst INITIAL_CONFIG = new InjectionToken('INITIAL_CONFIG');\n/** @type {?} */\nconst initialConfig = {\n    suffix: '',\n    prefix: '',\n    thousandSeparator: ' ',\n    decimalMarker: '.',\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    placeHolderCharacter: '_',\n    dropSpecialCharacters: true,\n    hiddenInput: undefined,\n    shownMaskExpression: '',\n    separatorLimit: '',\n    allowNegativeNumbers: false,\n    validation: true,\n    // tslint:disable-next-line: quotemark\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true,\n        },\n        X: {\n            pattern: new RegExp('\\\\d'),\n            symbol: '*',\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]'),\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]'),\n        },\n        d: {\n            pattern: new RegExp('\\\\d'),\n        },\n        m: {\n            pattern: new RegExp('\\\\d'),\n        },\n        M: {\n            pattern: new RegExp('\\\\d'),\n        },\n        H: {\n            pattern: new RegExp('\\\\d'),\n        },\n        h: {\n            pattern: new RegExp('\\\\d'),\n        },\n        s: {\n            pattern: new RegExp('\\\\d'),\n        },\n    },\n};\n/** @type {?} */\nconst timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\n/** @type {?} */\nconst withoutValidation = [\n    'percent',\n    'Hh',\n    's0',\n    'm0',\n    'separator',\n    'd0/M0/0000',\n    'd0/M0',\n    'd0',\n    'M0',\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MaskApplierService {\n    /**\n     * @param {?} _config\n     */\n    constructor(_config) {\n        this._config = _config;\n        this.maskExpression = '';\n        this.actualValue = '';\n        this.shownMaskExpression = '';\n        this._formatWithSeparators = (/**\n         * @param {?} str\n         * @param {?} thousandSeparatorChar\n         * @param {?} decimalChar\n         * @param {?} precision\n         * @return {?}\n         */\n        (str, thousandSeparatorChar, decimalChar, precision) => {\n            /** @type {?} */\n            const x = str.split(decimalChar);\n            /** @type {?} */\n            const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n            /** @type {?} */\n            let res = x[0];\n            /** @type {?} */\n            const separatorLimit = this.separatorLimit.replace(/\\s/g, '');\n            if (separatorLimit && +separatorLimit) {\n                if (res[0] === '-') {\n                    res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n                }\n                else {\n                    res = res.slice(0, separatorLimit.length);\n                }\n            }\n            /** @type {?} */\n            const rgx = /(\\d+)(\\d{3})/;\n            while (rgx.test(res)) {\n                res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n            }\n            if (precision === undefined) {\n                return res + decimals;\n            }\n            else if (precision === 0) {\n                return res;\n            }\n            return res + decimals.substr(0, precision + 1);\n        });\n        this.percentage = (/**\n         * @param {?} str\n         * @return {?}\n         */\n        (str) => {\n            return Number(str) >= 0 && Number(str) <= 100;\n        });\n        this.getPrecision = (/**\n         * @param {?} maskExpression\n         * @return {?}\n         */\n        (maskExpression) => {\n            /** @type {?} */\n            const x = maskExpression.split('.');\n            if (x.length > 1) {\n                return Number(x[x.length - 1]);\n            }\n            return Infinity;\n        });\n        this.checkInputPrecision = (/**\n         * @param {?} inputValue\n         * @param {?} precision\n         * @param {?} decimalMarker\n         * @return {?}\n         */\n        (inputValue, precision, decimalMarker) => {\n            if (precision < Infinity) {\n                /** @type {?} */\n                const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n                /** @type {?} */\n                const precisionMatch = inputValue.match(precisionRegEx);\n                if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                else if (precision === 0 && inputValue.endsWith(decimalMarker)) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n            }\n            return inputValue;\n        });\n        this._shift = new Set();\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.suffix = this._config.suffix;\n        this.thousandSeparator = this._config.thousandSeparator;\n        this.decimalMarker = this._config.decimalMarker;\n        this.hiddenInput = this._config.hiddenInput;\n        this.showMaskTyped = this._config.showMaskTyped;\n        this.placeHolderCharacter = this._config.placeHolderCharacter;\n        this.validation = this._config.validation;\n        this.separatorLimit = this._config.separatorLimit;\n        this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n    }\n    /**\n     * @param {?} inputValue\n     * @param {?} maskAndPattern\n     * @return {?}\n     */\n    applyMaskWithPattern(inputValue, maskAndPattern) {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    /**\n     * @param {?} inputValue\n     * @param {?} maskExpression\n     * @param {?=} position\n     * @param {?=} cb\n     * @return {?}\n     */\n    applyMask(inputValue, maskExpression, position = 0, cb = (/**\n     * @return {?}\n     */\n    () => { })) {\n        if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n            return '';\n        }\n        /** @type {?} */\n        let cursor = 0;\n        /** @type {?} */\n        let result = '';\n        /** @type {?} */\n        let multi = false;\n        /** @type {?} */\n        let backspaceShift = false;\n        /** @type {?} */\n        let shift = 1;\n        /** @type {?} */\n        let stepBack = false;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        if (!!this.suffix && inputValue.endsWith(this.suffix)) {\n            inputValue = inputValue.slice(0, inputValue.length - this.suffix.length);\n        }\n        /** @type {?} */\n        const inputArray = inputValue.toString().split('');\n        if (maskExpression === 'IP') {\n            this.ipError = !!(inputArray.filter((/**\n             * @param {?} i\n             * @return {?}\n             */\n            (i) => i === '.')).length < 3 && inputArray.length < 7);\n            maskExpression = '099.099.099.099';\n        }\n        if (maskExpression.startsWith('percent')) {\n            if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/]/)) {\n                inputValue = this._stripToDecimal(inputValue);\n                /** @type {?} */\n                const precision = this.getPrecision(maskExpression);\n                inputValue = this.checkInputPrecision(inputValue, precision, '.');\n            }\n            if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n                /** @type {?} */\n                const base = inputValue.substring(0, inputValue.indexOf('.') - 1);\n                inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n            }\n            if (this.percentage(inputValue)) {\n                result = inputValue;\n            }\n            else {\n                result = inputValue.substring(0, inputValue.length - 1);\n            }\n        }\n        else if (maskExpression.startsWith('separator')) {\n            if (inputValue.match('[wа-яА-Я]') ||\n                inputValue.match('[ЁёА-я]') ||\n                inputValue.match('[a-z]|[A-Z]') ||\n                inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\[\\]:\";<>.?\\/]/) ||\n                inputValue.match('[^A-Za-z0-9,]')) {\n                inputValue = this._stripToDecimal(inputValue);\n            }\n            inputValue =\n                inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== this.decimalMarker\n                    ? inputValue.slice(1, inputValue.length)\n                    : inputValue;\n            // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n            //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n            /** @type {?} */\n            const thousandSeperatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n            /** @type {?} */\n            const decimalMarkerEscaped = this._charToRegExpExpression(this.decimalMarker);\n            /** @type {?} */\n            const invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\";<>?\\\\/'\n                .replace(thousandSeperatorCharEscaped, '')\n                .replace(decimalMarkerEscaped, '');\n            /** @type {?} */\n            const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n            if (inputValue.match(invalidCharRegexp)) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            /** @type {?} */\n            const precision = this.getPrecision(maskExpression);\n            inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            /** @type {?} */\n            const strForSep = inputValue.replace(new RegExp(thousandSeperatorCharEscaped, 'g'), '');\n            result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n            /** @type {?} */\n            const commaShift = result.indexOf(',') - inputValue.indexOf(',');\n            /** @type {?} */\n            const shiftStep = result.length - inputValue.length;\n            if (shiftStep > 0 && result[position] !== ',') {\n                backspaceShift = true;\n                /** @type {?} */\n                let _shift = 0;\n                do {\n                    this._shift.add(position + _shift);\n                    _shift++;\n                } while (_shift < shiftStep);\n            }\n            else if ((commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3)) ||\n                (!(result.indexOf('.') >= position && position > 3) && shiftStep <= 0)) {\n                this._shift.clear();\n                backspaceShift = true;\n                shift = shiftStep;\n                position += shiftStep;\n                this._shift.add(position);\n            }\n            else {\n                this._shift.clear();\n            }\n        }\n        else {\n            for (\n            // tslint:disable-next-line\n            let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i]) {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n                    result += inputSymbol;\n                    cursor += 2;\n                }\n                else if (maskExpression[cursor + 1] === '*' &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '*') {\n                    result += inputSymbol;\n                    multi = true;\n                }\n                else if (maskExpression[cursor + 1] === '?' &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n                    result += inputSymbol;\n                    cursor += 3;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) ||\n                    (this.hiddenInput &&\n                        this.maskAvailablePatterns[maskExpression[cursor]] &&\n                        this.maskAvailablePatterns[maskExpression[cursor]].symbol === inputSymbol)) {\n                    if (maskExpression[cursor] === 'H') {\n                        if (Number(inputSymbol) > 2) {\n                            cursor += 1;\n                            /** @type {?} */\n                            const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'h') {\n                        if (result === '2' && Number(inputSymbol) > 3) {\n                            cursor += 1;\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'm') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            /** @type {?} */\n                            const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 's') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            /** @type {?} */\n                            const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    /** @type {?} */\n                    const daysCount = 31;\n                    if (maskExpression[cursor] === 'd') {\n                        if (Number(inputValue.slice(cursor, cursor + 2)) > daysCount || inputValue[cursor + 1] === '/') {\n                            cursor += 1;\n                            /** @type {?} */\n                            const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'M') {\n                        /** @type {?} */\n                        const monthsCount = 12;\n                        // mask without day\n                        /** @type {?} */\n                        const withoutDays = cursor === 0 &&\n                            (Number(inputSymbol) > 2 ||\n                                Number(inputValue.slice(cursor, cursor + 2)) > monthsCount ||\n                                inputValue[cursor + 1] === '/');\n                        // day<10 && month<12 for input\n                        /** @type {?} */\n                        const day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            ((inputValue[cursor - 2] === '/' &&\n                                (Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount && inputValue[cursor] !== '/')) ||\n                                inputValue[cursor] === '/' ||\n                                ((inputValue[cursor - 3] === '/' &&\n                                    (Number(inputValue.slice(cursor - 2, cursor)) > monthsCount && inputValue[cursor - 1] !== '/')) ||\n                                    inputValue[cursor - 1] === '/'));\n                        // 10<day<31 && month<12 for input\n                        /** @type {?} */\n                        const day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            inputValue[cursor - 1] === '/' &&\n                            (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/');\n                        // day<10 && month<12 for paste whole data\n                        /** @type {?} */\n                        const day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            (!inputValue.slice(cursor - 2, cursor).includes('/') &&\n                                Number(inputValue.slice(cursor - 2, cursor)) > monthsCount);\n                        // 10<day<31 && month<12 for paste whole data\n                        /** @type {?} */\n                        const day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            inputValue[cursor - 1] !== '/' &&\n                            Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n                        if (withoutDays || day1monthInput || day2monthInput || day1monthPaste || day2monthPaste) {\n                            cursor += 1;\n                            /** @type {?} */\n                            const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    /** @type {?} */\n                    const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n                    this._shift.add(shiftStep + this.prefix.length || 0);\n                    i--;\n                }\n                else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\n                    this.maskAvailablePatterns[maskExpression[cursor]] &&\n                    this.maskAvailablePatterns[maskExpression[cursor]].optional) {\n                    if (!!inputArray[cursor] && maskExpression !== '099.099.099.099') {\n                        result += inputArray[cursor];\n                    }\n                    cursor++;\n                    i--;\n                }\n                else if (this.maskExpression[cursor + 1] === '*' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.maskExpression[cursor + 1] === '?' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.showMaskTyped && this.maskSpecialCharacters.indexOf(inputSymbol) < 0 && inputSymbol !== this.placeHolderCharacter) {\n                    stepBack = true;\n                }\n            }\n        }\n        if (result.length + 1 === maskExpression.length &&\n            this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n        /** @type {?} */\n        let newPosition = position + 1;\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n        /** @type {?} */\n        let actualShift = this._shift.has(position) ? shift : 0;\n        if (stepBack) {\n            actualShift--;\n        }\n        cb(actualShift, backspaceShift);\n        if (shift < 0) {\n            this._shift.clear();\n        }\n        /** @type {?} */\n        let res = `${this.prefix}${result}${this.suffix}`;\n        if (result.length === 0) {\n            res = `${this.prefix}${result}`;\n        }\n        return res;\n    }\n    /**\n     * @param {?} inputSymbol\n     * @return {?}\n     */\n    _findSpecialChar(inputSymbol) {\n        return this.maskSpecialCharacters.find((/**\n         * @param {?} val\n         * @return {?}\n         */\n        (val) => val === inputSymbol));\n    }\n    /**\n     * @protected\n     * @param {?} inputSymbol\n     * @param {?} maskSymbol\n     * @return {?}\n     */\n    _checkSymbolMask(inputSymbol, maskSymbol) {\n        this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n        return (this.maskAvailablePatterns[maskSymbol] &&\n            this.maskAvailablePatterns[maskSymbol].pattern &&\n            this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol));\n    }\n    /**\n     * @private\n     * @param {?} str\n     * @return {?}\n     */\n    _stripToDecimal(str) {\n        return str\n            .split('')\n            .filter((/**\n         * @param {?} i\n         * @param {?} idx\n         * @return {?}\n         */\n        (i, idx) => {\n            return i.match('^-?\\\\d') || i === '.' || i === ',' || (i === '-' && idx === 0);\n        }))\n            .join('');\n    }\n    /**\n     * @private\n     * @param {?} char\n     * @return {?}\n     */\n    _charToRegExpExpression(char) {\n        /** @type {?} */\n        const charsToEscape = '[\\\\^$.|?*+()';\n        return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? '\\\\' + char : char;\n    }\n}\nMaskApplierService.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nMaskApplierService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [config,] }] }\n];\nif (false) {\n    /** @type {?} */\n    MaskApplierService.prototype.dropSpecialCharacters;\n    /** @type {?} */\n    MaskApplierService.prototype.hiddenInput;\n    /** @type {?} */\n    MaskApplierService.prototype.showTemplate;\n    /** @type {?} */\n    MaskApplierService.prototype.clearIfNotMatch;\n    /** @type {?} */\n    MaskApplierService.prototype.maskExpression;\n    /** @type {?} */\n    MaskApplierService.prototype.actualValue;\n    /** @type {?} */\n    MaskApplierService.prototype.shownMaskExpression;\n    /** @type {?} */\n    MaskApplierService.prototype.maskSpecialCharacters;\n    /** @type {?} */\n    MaskApplierService.prototype.maskAvailablePatterns;\n    /** @type {?} */\n    MaskApplierService.prototype.prefix;\n    /** @type {?} */\n    MaskApplierService.prototype.suffix;\n    /** @type {?} */\n    MaskApplierService.prototype.thousandSeparator;\n    /** @type {?} */\n    MaskApplierService.prototype.decimalMarker;\n    /** @type {?} */\n    MaskApplierService.prototype.customPattern;\n    /** @type {?} */\n    MaskApplierService.prototype.ipError;\n    /** @type {?} */\n    MaskApplierService.prototype.showMaskTyped;\n    /** @type {?} */\n    MaskApplierService.prototype.placeHolderCharacter;\n    /** @type {?} */\n    MaskApplierService.prototype.validation;\n    /** @type {?} */\n    MaskApplierService.prototype.separatorLimit;\n    /** @type {?} */\n    MaskApplierService.prototype.allowNegativeNumbers;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskApplierService.prototype._shift;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskApplierService.prototype._formatWithSeparators;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskApplierService.prototype.percentage;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskApplierService.prototype.getPrecision;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskApplierService.prototype.checkInputPrecision;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MaskApplierService.prototype._config;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MaskService extends MaskApplierService {\n    /**\n     * @param {?} document\n     * @param {?} _config\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     */\n    constructor(document, _config, _elementRef, _renderer) {\n        super(_config);\n        this.document = document;\n        this._config = _config;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this.maskExpression = '';\n        this.isNumberValue = false;\n        this.placeHolderCharacter = '_';\n        this.maskIsShown = '';\n        this.selStart = null;\n        this.selEnd = null;\n        this.onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        this._formElement = this._elementRef.nativeElement;\n    }\n    // tslint:disable-next-line:cyclomatic-complexity\n    /**\n     * @param {?} inputValue\n     * @param {?} maskExpression\n     * @param {?=} position\n     * @param {?=} cb\n     * @return {?}\n     */\n    applyMask(inputValue, maskExpression, position = 0, cb = (/**\n     * @return {?}\n     */\n    () => { })) {\n        if (!maskExpression) {\n            return inputValue;\n        }\n        this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n        if (this.maskExpression === 'IP' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (!inputValue && this.showMaskTyped) {\n            this.formControlResult(this.prefix);\n            return this.prefix + this.maskIsShown;\n        }\n        /** @type {?} */\n        const getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n        /** @type {?} */\n        let newInputValue = '';\n        if (this.hiddenInput !== undefined) {\n            /** @type {?} */\n            let actualResult = this.actualValue.split('');\n            // tslint:disable no-unused-expression\n            inputValue !== '' && actualResult.length\n                ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n                    ? inputValue.length > actualResult.length\n                        ? actualResult.splice(this.selStart, 0, getSymbol)\n                        : inputValue.length < actualResult.length\n                            ? actualResult.length - inputValue.length === 1\n                                ? actualResult.splice(this.selStart - 1, 1)\n                                : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n                            : null\n                    : null\n                : (actualResult = []);\n            // tslint:enable no-unused-expression\n            newInputValue = this.actualValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n        }\n        newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n        /** @type {?} */\n        const result = super.applyMask(newInputValue, maskExpression, position, cb);\n        this.actualValue = this.getActualValue(result);\n        // handle some separator implications:\n        // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n        if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n            this.decimalMarker = ',';\n        }\n        // b) remove decimal marker from list of special characters to mask\n        if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((/**\n             * @param {?} item\n             * @return {?}\n             */\n            (item) => item !== this.decimalMarker));\n        }\n        this.formControlResult(result);\n        if (!this.showMaskTyped) {\n            if (this.hiddenInput) {\n                return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n            }\n            return result;\n        }\n        /** @type {?} */\n        const resLen = result.length;\n        /** @type {?} */\n        const prefNmask = this.prefix + this.maskIsShown;\n        return result + (this.maskExpression === 'IP' ? prefNmask : prefNmask.slice(resLen));\n    }\n    /**\n     * @param {?=} position\n     * @param {?=} cb\n     * @return {?}\n     */\n    applyValueChanges(position = 0, cb = (/**\n     * @return {?}\n     */\n    () => { })) {\n        this._formElement.value = this.applyMask(this._formElement.value, this.maskExpression, position, cb);\n        if (this._formElement === this.document.activeElement) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n    /**\n     * @param {?} inputValue\n     * @param {?} maskExpression\n     * @return {?}\n     */\n    hideInput(inputValue, maskExpression) {\n        return inputValue\n            .split('')\n            .map((/**\n         * @param {?} curr\n         * @param {?} index\n         * @return {?}\n         */\n        (curr, index) => {\n            if (this.maskAvailablePatterns &&\n                this.maskAvailablePatterns[maskExpression[index]] &&\n                this.maskAvailablePatterns[maskExpression[index]].symbol) {\n                return this.maskAvailablePatterns[maskExpression[index]].symbol;\n            }\n            return curr;\n        }))\n            .join('');\n    }\n    // this function is not necessary, it checks result against maskExpression\n    /**\n     * @param {?} res\n     * @return {?}\n     */\n    getActualValue(res) {\n        /** @type {?} */\n        const compare = res\n            .split('')\n            .filter((/**\n         * @param {?} symbol\n         * @param {?} i\n         * @return {?}\n         */\n        (symbol, i) => this._checkSymbolMask(symbol, this.maskExpression[i]) ||\n            (this.maskSpecialCharacters.includes(this.maskExpression[i]) && symbol === this.maskExpression[i])));\n        if (compare.join('') === res) {\n            return compare.join('');\n        }\n        return res;\n    }\n    /**\n     * @param {?} inputValue\n     * @return {?}\n     */\n    shiftTypedSymbols(inputValue) {\n        /** @type {?} */\n        let symbolToReplace = '';\n        /** @type {?} */\n        const newInputValue = (inputValue &&\n            inputValue.split('').map((/**\n             * @param {?} currSymbol\n             * @param {?} index\n             * @return {?}\n             */\n            (currSymbol, index) => {\n                if (this.maskSpecialCharacters.includes(inputValue[index + 1]) &&\n                    inputValue[index + 1] !== this.maskExpression[index + 1]) {\n                    symbolToReplace = currSymbol;\n                    return inputValue[index + 1];\n                }\n                if (symbolToReplace.length) {\n                    /** @type {?} */\n                    const replaceSymbol = symbolToReplace;\n                    symbolToReplace = '';\n                    return replaceSymbol;\n                }\n                return currSymbol;\n            }))) ||\n            [];\n        return newInputValue.join('');\n    }\n    /**\n     * @param {?=} inputVal\n     * @return {?}\n     */\n    showMaskInInput(inputVal) {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            }\n            else {\n                return this.shownMaskExpression;\n            }\n        }\n        else if (this.showMaskTyped) {\n            if (inputVal) {\n                return this._checkForIp(inputVal);\n            }\n            return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n        }\n        return '';\n    }\n    /**\n     * @return {?}\n     */\n    clearIfNotMatchFn() {\n        if (this.clearIfNotMatch &&\n            this.prefix.length + this.maskExpression.length + this.suffix.length !==\n                this._formElement.value.replace(/_/g, '').length) {\n            this.formElementProperty = ['value', ''];\n            this.applyMask(this._formElement.value, this.maskExpression);\n        }\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    set formElementProperty([name, value]) {\n        this._renderer.setProperty(this._formElement, name, value);\n    }\n    /**\n     * @param {?} mask\n     * @return {?}\n     */\n    checkSpecialCharAmount(mask) {\n        /** @type {?} */\n        const chars = mask.split('').filter((/**\n         * @param {?} item\n         * @return {?}\n         */\n        (item) => this._findSpecialChar(item)));\n        return chars.length;\n    }\n    /**\n     * @private\n     * @param {?} inputVal\n     * @return {?}\n     */\n    _checkForIp(inputVal) {\n        if (inputVal === '#') {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        /** @type {?} */\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            if (inputVal[i].match('\\\\d')) {\n                arr.push(inputVal[i]);\n            }\n        }\n        if (arr.length <= 3) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return this.placeHolderCharacter;\n        }\n        if (arr.length > 9 && arr.length <= 12) {\n            return '';\n        }\n        return '';\n    }\n    /**\n     * @private\n     * @param {?} inputValue\n     * @return {?}\n     */\n    formControlResult(inputValue) {\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            this.onChange(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters));\n        }\n        else if (this.dropSpecialCharacters) {\n            this.onChange(this._checkSymbols(inputValue));\n        }\n        else {\n            this.onChange(this._removeSuffix(this._removePrefix(inputValue)));\n        }\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @param {?} specialCharactersForRemove\n     * @return {?}\n     */\n    _removeMask(value, specialCharactersForRemove) {\n        return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _removePrefix(value) {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, '') : value;\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _removeSuffix(value) {\n        if (!this.suffix) {\n            return value;\n        }\n        return value ? value.replace(this.suffix, '') : value;\n    }\n    /**\n     * @private\n     * @param {?} result\n     * @return {?}\n     */\n    _retrieveSeparatorValue(result) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n    }\n    /**\n     * @private\n     * @param {?} specialCharactersForRemove\n     * @return {?}\n     */\n    _regExpForRemove(specialCharactersForRemove) {\n        return new RegExp(specialCharactersForRemove.map((/**\n         * @param {?} item\n         * @return {?}\n         */\n        (item) => `\\\\${item}`)).join('|'), 'gi');\n    }\n    /**\n     * @private\n     * @param {?} result\n     * @return {?}\n     */\n    _checkSymbols(result) {\n        if (result === '') {\n            return result;\n        }\n        /** @type {?} */\n        const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n        /** @type {?} */\n        let separatorValue = this._retrieveSeparatorValue(result);\n        if (this.decimalMarker !== '.') {\n            separatorValue = separatorValue.replace(this.decimalMarker, '.');\n        }\n        if (this.isNumberValue) {\n            if (separatorPrecision) {\n                if (result === this.decimalMarker) {\n                    return null;\n                }\n                return this._checkPrecision(this.maskExpression, separatorValue);\n            }\n            else {\n                return Number(separatorValue);\n            }\n        }\n        else {\n            return separatorValue;\n        }\n    }\n    // TODO should think about helpers or separting decimal precision to own property\n    /**\n     * @private\n     * @param {?} maskExpretion\n     * @return {?}\n     */\n    _retrieveSeparatorPrecision(maskExpretion) {\n        /** @type {?} */\n        const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n        return matcher ? Number(matcher[1]) : null;\n    }\n    /**\n     * @private\n     * @param {?} separatorExpression\n     * @param {?} separatorValue\n     * @return {?}\n     */\n    _checkPrecision(separatorExpression, separatorValue) {\n        if (separatorExpression.indexOf('2') > 0) {\n            return Number(separatorValue).toFixed(2);\n        }\n        return Number(separatorValue);\n    }\n}\nMaskService.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nMaskService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [config,] }] },\n    { type: ElementRef },\n    { type: Renderer2 }\n];\nif (false) {\n    /** @type {?} */\n    MaskService.prototype.maskExpression;\n    /** @type {?} */\n    MaskService.prototype.isNumberValue;\n    /** @type {?} */\n    MaskService.prototype.placeHolderCharacter;\n    /** @type {?} */\n    MaskService.prototype.maskIsShown;\n    /** @type {?} */\n    MaskService.prototype.selStart;\n    /** @type {?} */\n    MaskService.prototype.selEnd;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MaskService.prototype._formElement;\n    /** @type {?} */\n    MaskService.prototype.onChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskService.prototype.document;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MaskService.prototype._config;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskService.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskService.prototype._renderer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// tslint:disable deprecation\nclass MaskDirective {\n    /**\n     * @param {?} document\n     * @param {?} _maskService\n     * @param {?} _config\n     */\n    constructor(document, _maskService, _config) {\n        this.document = document;\n        this._maskService = _maskService;\n        this._config = _config;\n        this.maskExpression = '';\n        this.specialCharacters = [];\n        this.patterns = {};\n        this.prefix = '';\n        this.suffix = '';\n        this.thousandSeparator = ' ';\n        this.decimalMarker = '.';\n        this.dropSpecialCharacters = null;\n        this.hiddenInput = null;\n        this.showMaskTyped = null;\n        this.placeHolderCharacter = null;\n        this.shownMaskExpression = null;\n        this.showTemplate = null;\n        this.clearIfNotMatch = null;\n        this.validation = null;\n        this.separatorLimit = null;\n        this.allowNegativeNumbers = null;\n        this._maskValue = '';\n        this._position = null;\n        this.onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        this.onTouch = (/**\n         * @return {?}\n         */\n        () => { });\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        const { maskExpression, specialCharacters, patterns, prefix, suffix, thousandSeparator, decimalMarker, dropSpecialCharacters, hiddenInput, showMaskTyped, placeHolderCharacter, shownMaskExpression, showTemplate, clearIfNotMatch, validation, separatorLimit, allowNegativeNumbers, } = changes;\n        if (maskExpression) {\n            this._maskValue = changes.maskExpression.currentValue || '';\n        }\n        if (specialCharacters) {\n            if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n                return;\n            }\n            else {\n                this._maskService.maskSpecialCharacters = changes.specialCharacters.currentValue || [];\n            }\n        }\n        // Only overwrite the mask available patterns if a pattern has actually been passed in\n        if (patterns && patterns.currentValue) {\n            this._maskService.maskAvailablePatterns = patterns.currentValue;\n        }\n        if (prefix) {\n            this._maskService.prefix = prefix.currentValue;\n        }\n        if (suffix) {\n            this._maskService.suffix = suffix.currentValue;\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator.currentValue;\n        }\n        if (decimalMarker) {\n            this._maskService.decimalMarker = decimalMarker.currentValue;\n        }\n        if (dropSpecialCharacters) {\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n        if (hiddenInput) {\n            this._maskService.hiddenInput = hiddenInput.currentValue;\n        }\n        if (showMaskTyped) {\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\n        }\n        if (placeHolderCharacter) {\n            this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n        }\n        if (shownMaskExpression) {\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n        if (showTemplate) {\n            this._maskService.showTemplate = showTemplate.currentValue;\n        }\n        if (clearIfNotMatch) {\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n        if (validation) {\n            this._maskService.validation = validation.currentValue;\n        }\n        if (separatorLimit) {\n            this._maskService.separatorLimit = separatorLimit.currentValue;\n        }\n        if (allowNegativeNumbers) {\n            this._maskService.maskSpecialCharacters = this._maskService.maskSpecialCharacters.filter((/**\n             * @param {?} c\n             * @return {?}\n             */\n            (c) => c !== '-'));\n        }\n        this._applyMask();\n    }\n    // tslint:disable-next-line: cyclomatic-complexity\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    validate({ value }) {\n        if (!this._maskService.validation) {\n            return null;\n        }\n        if (this._maskService.ipError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskValue.startsWith('separator')) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (timeMasks.includes(this._maskValue)) {\n            return this._validateTime(value);\n        }\n        if (value && value.toString().length >= 1) {\n            /** @type {?} */\n            let counterOfOpt = 0;\n            for (const key in this._maskService.maskAvailablePatterns) {\n                if (this._maskService.maskAvailablePatterns[key].optional &&\n                    this._maskService.maskAvailablePatterns[key].optional === true) {\n                    if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n                        /** @type {?} */\n                        const opt = this._maskValue\n                            .split('')\n                            .filter((/**\n                         * @param {?} i\n                         * @return {?}\n                         */\n                        (i) => i === key))\n                            .join('');\n                        counterOfOpt += opt.length;\n                    }\n                    else if (this._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (this._maskValue.indexOf(key) !== -1 && value.toString().length >= this._maskValue.indexOf(key)) {\n                        return null;\n                    }\n                    if (counterOfOpt === this._maskValue.length) {\n                        return null;\n                    }\n                }\n            }\n            if (this._maskValue.indexOf('{') === 1 &&\n                value.toString().length === this._maskValue.length + Number(this._maskValue.split('{')[1].split('}')[0]) - 4) {\n                return null;\n            }\n            if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n                return null;\n            }\n            else if ((this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*')) ||\n                (this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?')) ||\n                this._maskValue.indexOf('{') === 1) {\n                return this._createValidationError(value);\n            }\n            if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n                /** @type {?} */\n                const length = this._maskService.dropSpecialCharacters\n                    ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt\n                    : this._maskValue.length - counterOfOpt;\n                if (value.toString().length < length) {\n                    return this._createValidationError(value);\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    onInput(e) {\n        /** @type {?} */\n        const el = (/** @type {?} */ (e.target));\n        this._inputValue = el.value;\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n        /** @type {?} */\n        const position = el.selectionStart === 1\n            ? ((/** @type {?} */ (el.selectionStart))) + this._maskService.prefix.length\n            : ((/** @type {?} */ (el.selectionStart)));\n        /** @type {?} */\n        let caretShift = 0;\n        /** @type {?} */\n        let backspaceShift = false;\n        this._maskService.applyValueChanges(position, (/**\n         * @param {?} shift\n         * @param {?} _backspaceShift\n         * @return {?}\n         */\n        (shift, _backspaceShift) => {\n            caretShift = shift;\n            backspaceShift = _backspaceShift;\n        }));\n        // only set the selection if the element is active\n        if (this.document.activeElement !== el) {\n            return;\n        }\n        this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n        /** @type {?} */\n        let positionToApply = this._position\n            ? this._inputValue.length + position + caretShift\n            : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n        if (positionToApply > this._getActualInputLength()) {\n            positionToApply = this._getActualInputLength();\n        }\n        el.setSelectionRange(positionToApply, positionToApply);\n        if ((this.maskExpression.includes('H') || this.maskExpression.includes('M')) && caretShift === 0) {\n            el.setSelectionRange(((/** @type {?} */ (el.selectionStart))) + 1, ((/** @type {?} */ (el.selectionStart))) + 1);\n        }\n        this._position = null;\n    }\n    /**\n     * @return {?}\n     */\n    onBlur() {\n        this._maskService.clearIfNotMatchFn();\n        this.onTouch();\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    onFocus(e) {\n        /** @type {?} */\n        const el = (/** @type {?} */ (e.target));\n        /** @type {?} */\n        const posStart = 0;\n        /** @type {?} */\n        const posEnd = 0;\n        if (el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // tslint:disable-next-line\n            ((/** @type {?} */ (e))).keyCode !== 38)\n            if (this._maskService.showMaskTyped) {\n                // We are showing the mask in the input\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\n                if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n                    // the input ONLY contains the mask, so position the cursor at the start\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                }\n                else {\n                    // the input contains some characters already\n                    if (el.selectionStart > this._maskService.actualValue.length) {\n                        // if the user clicked beyond our value's length, position the cursor at the end of our value\n                        el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n                    }\n                }\n            }\n        /** @type {?} */\n        const nextValue = !el.value || el.value === this._maskService.prefix\n            ? this._maskService.prefix + this._maskService.maskIsShown\n            : el.value;\n        /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n        if (el.value !== nextValue) {\n            el.value = nextValue;\n        }\n        /** fix of cursor position with prefix when mouse click occur */\n        if ((((/** @type {?} */ (el.selectionStart))) || ((/** @type {?} */ (el.selectionEnd)))) <= this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n        /** select only inserted text */\n        if (((/** @type {?} */ (el.selectionEnd))) > this._getActualInputLength()) {\n            el.selectionEnd = this._getActualInputLength();\n        }\n    }\n    // tslint:disable-next-line: cyclomatic-complexity\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    onKeyDown(e) {\n        this._code = e.code ? e.code : e.key;\n        /** @type {?} */\n        const el = (/** @type {?} */ (e.target));\n        this._inputValue = el.value;\n        if (e.keyCode === 38) {\n            e.preventDefault();\n        }\n        if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n            if (e.keyCode === 8 && el.value.length === 0) {\n                el.selectionStart = el.selectionEnd;\n            }\n            if (e.keyCode === 8 && ((/** @type {?} */ (el.selectionStart))) !== 0) {\n                // If specialChars is false, (shouldn't ever happen) then set to the defaults\n                this.specialCharacters = this.specialCharacters || this._config.specialCharacters;\n                if (this.prefix.length > 1 && ((/** @type {?} */ (el.selectionStart))) <= this.prefix.length) {\n                    el.setSelectionRange(this.prefix.length, this.prefix.length);\n                }\n                else {\n                    if (this._inputValue.length !== ((/** @type {?} */ (el.selectionStart))) && ((/** @type {?} */ (el.selectionStart))) !== 1) {\n                        while (this.specialCharacters.includes(this._inputValue[((/** @type {?} */ (el.selectionStart))) - 1].toString()) &&\n                            ((this.prefix.length >= 1 && ((/** @type {?} */ (el.selectionStart))) > this.prefix.length) ||\n                                this.prefix.length === 0)) {\n                            el.setSelectionRange(((/** @type {?} */ (el.selectionStart))) - 1, ((/** @type {?} */ (el.selectionStart))) - 1);\n                        }\n                    }\n                    this.suffixCheckOnPressDelete(e.keyCode, el);\n                }\n            }\n            this.suffixCheckOnPressDelete(e.keyCode, el);\n            if (this._maskService.prefix.length &&\n                ((/** @type {?} */ (el.selectionStart))) <= this._maskService.prefix.length &&\n                ((/** @type {?} */ (el.selectionEnd))) <= this._maskService.prefix.length) {\n                e.preventDefault();\n            }\n            /** @type {?} */\n            const cursorStart = el.selectionStart;\n            // this.onFocus(e);\n            if (e.keyCode === 8 &&\n                !el.readOnly &&\n                cursorStart === 0 &&\n                el.selectionEnd === el.value.length &&\n                el.value.length !== 0) {\n                this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n                this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n            }\n        }\n        if (!!this.suffix &&\n            this.suffix.length > 1 &&\n            this._inputValue.length - this.suffix.length < ((/** @type {?} */ (el.selectionStart)))) {\n            el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n        }\n        else if ((e.keyCode === 65 && e.ctrlKey === true) || // Ctrl+ A\n            (e.keyCode === 65 && e.metaKey === true) // Cmd + A (Mac)\n        ) {\n            el.setSelectionRange(0, this._getActualInputLength());\n            e.preventDefault();\n        }\n        this._maskService.selStart = el.selectionStart;\n        this._maskService.selEnd = el.selectionEnd;\n    }\n    /**\n     * It writes the value in the input\n     * @param {?} inputValue\n     * @return {?}\n     */\n    writeValue(inputValue) {\n        return __awaiter(this, void 0, void 0, /** @this {!MaskDirective} */ function* () {\n            if (inputValue === undefined) {\n                inputValue = '';\n            }\n            if (typeof inputValue === 'number') {\n                inputValue = String(inputValue);\n                inputValue = this.decimalMarker !== '.' ? inputValue.replace('.', this.decimalMarker) : inputValue;\n                this._maskService.isNumberValue = true;\n            }\n            (inputValue && this._maskService.maskExpression) ||\n                (this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped))\n                ? (this._maskService.formElementProperty = [\n                    'value',\n                    this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n                ])\n                : (this._maskService.formElementProperty = ['value', inputValue]);\n            this._inputValue = inputValue;\n        });\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n        this._maskService.onChange = this.onChange;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouch = fn;\n    }\n    /**\n     * @param {?} keyCode\n     * @param {?} el\n     * @return {?}\n     */\n    suffixCheckOnPressDelete(keyCode, el) {\n        if (keyCode === 46 && this.suffix.length > 0) {\n            if (this._inputValue.length - this.suffix.length <= ((/** @type {?} */ (el.selectionStart)))) {\n                el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n            }\n        }\n        if (keyCode === 8) {\n            if (this.suffix.length > 1 && this._inputValue.length - this.suffix.length < ((/** @type {?} */ (el.selectionStart)))) {\n                el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n            }\n            if (this.suffix.length === 1 && this._inputValue.length === ((/** @type {?} */ (el.selectionStart)))) {\n                el.setSelectionRange(((/** @type {?} */ (el.selectionStart))) - 1, ((/** @type {?} */ (el.selectionStart))) - 1);\n            }\n        }\n    }\n    /**\n     * It disables the input element\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    onModelChange(e) {\n        if (!e) {\n            this._maskService.actualValue = '';\n        }\n    }\n    /**\n     * @private\n     * @param {?} maskExp\n     * @return {?}\n     */\n    _repeatPatternSymbols(maskExp) {\n        return ((maskExp.match(/{[0-9]+}/) &&\n            maskExp.split('').reduce((/**\n             * @param {?} accum\n             * @param {?} currval\n             * @param {?} index\n             * @return {?}\n             */\n            (accum, currval, index) => {\n                this._start = currval === '{' ? index : this._start;\n                if (currval !== '}') {\n                    return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n                }\n                this._end = index;\n                /** @type {?} */\n                const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n                /** @type {?} */\n                const repaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                return accum + repaceWith;\n            }), '')) ||\n            maskExp);\n    }\n    // tslint:disable-next-line:no-any\n    /**\n     * @private\n     * @return {?}\n     */\n    _applyMask() {\n        this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n        ];\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _validateTime(value) {\n        /** @type {?} */\n        const rowMaskLen = this._maskValue.split('').filter((/**\n         * @param {?} s\n         * @return {?}\n         */\n        (s) => s !== ':')).length;\n        if (value === null || value.length === 0) {\n            return null; // Don't validate empty values to allow for optional form control\n        }\n        if ((+value[value.length - 1] === 0 && value.length < rowMaskLen) || value.length <= rowMaskLen - 2) {\n            return this._createValidationError(value);\n        }\n        return null;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getActualInputLength() {\n        return (this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length);\n    }\n    /**\n     * @private\n     * @param {?} actualValue\n     * @return {?}\n     */\n    _createValidationError(actualValue) {\n        return {\n            mask: {\n                requiredMask: this._maskValue,\n                actualValue,\n            },\n        };\n    }\n}\nMaskDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[mask]',\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef((/**\n                         * @return {?}\n                         */\n                        () => MaskDirective)),\n                        multi: true,\n                    },\n                    {\n                        provide: NG_VALIDATORS,\n                        useExisting: forwardRef((/**\n                         * @return {?}\n                         */\n                        () => MaskDirective)),\n                        multi: true,\n                    },\n                    MaskService,\n                ],\n            },] }\n];\n/** @nocollapse */\nMaskDirective.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: MaskService },\n    { type: undefined, decorators: [{ type: Inject, args: [config,] }] }\n];\nMaskDirective.propDecorators = {\n    maskExpression: [{ type: Input, args: ['mask',] }],\n    specialCharacters: [{ type: Input }],\n    patterns: [{ type: Input }],\n    prefix: [{ type: Input }],\n    suffix: [{ type: Input }],\n    thousandSeparator: [{ type: Input }],\n    decimalMarker: [{ type: Input }],\n    dropSpecialCharacters: [{ type: Input }],\n    hiddenInput: [{ type: Input }],\n    showMaskTyped: [{ type: Input }],\n    placeHolderCharacter: [{ type: Input }],\n    shownMaskExpression: [{ type: Input }],\n    showTemplate: [{ type: Input }],\n    clearIfNotMatch: [{ type: Input }],\n    validation: [{ type: Input }],\n    separatorLimit: [{ type: Input }],\n    allowNegativeNumbers: [{ type: Input }],\n    onInput: [{ type: HostListener, args: ['input', ['$event'],] }],\n    onBlur: [{ type: HostListener, args: ['blur',] }],\n    onFocus: [{ type: HostListener, args: ['click', ['$event'],] }],\n    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }],\n    onModelChange: [{ type: HostListener, args: ['ngModelChange', ['$event'],] }]\n};\nif (false) {\n    /** @type {?} */\n    MaskDirective.prototype.maskExpression;\n    /** @type {?} */\n    MaskDirective.prototype.specialCharacters;\n    /** @type {?} */\n    MaskDirective.prototype.patterns;\n    /** @type {?} */\n    MaskDirective.prototype.prefix;\n    /** @type {?} */\n    MaskDirective.prototype.suffix;\n    /** @type {?} */\n    MaskDirective.prototype.thousandSeparator;\n    /** @type {?} */\n    MaskDirective.prototype.decimalMarker;\n    /** @type {?} */\n    MaskDirective.prototype.dropSpecialCharacters;\n    /** @type {?} */\n    MaskDirective.prototype.hiddenInput;\n    /** @type {?} */\n    MaskDirective.prototype.showMaskTyped;\n    /** @type {?} */\n    MaskDirective.prototype.placeHolderCharacter;\n    /** @type {?} */\n    MaskDirective.prototype.shownMaskExpression;\n    /** @type {?} */\n    MaskDirective.prototype.showTemplate;\n    /** @type {?} */\n    MaskDirective.prototype.clearIfNotMatch;\n    /** @type {?} */\n    MaskDirective.prototype.validation;\n    /** @type {?} */\n    MaskDirective.prototype.separatorLimit;\n    /** @type {?} */\n    MaskDirective.prototype.allowNegativeNumbers;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskDirective.prototype._maskValue;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskDirective.prototype._inputValue;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskDirective.prototype._position;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskDirective.prototype._start;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskDirective.prototype._end;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskDirective.prototype._code;\n    /** @type {?} */\n    MaskDirective.prototype.onChange;\n    /** @type {?} */\n    MaskDirective.prototype.onTouch;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskDirective.prototype.document;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskDirective.prototype._maskService;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MaskDirective.prototype._config;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MaskPipe {\n    /**\n     * @param {?} _maskService\n     */\n    constructor(_maskService) {\n        this._maskService = _maskService;\n    }\n    /**\n     * @param {?} value\n     * @param {?} mask\n     * @param {?=} thousandSeparator\n     * @return {?}\n     */\n    transform(value, mask, thousandSeparator = null) {\n        if (!value && typeof value !== 'number') {\n            return '';\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator;\n        }\n        if (typeof mask === 'string') {\n            return this._maskService.applyMask(`${value}`, mask);\n        }\n        return this._maskService.applyMaskWithPattern(`${value}`, mask);\n    }\n}\nMaskPipe.decorators = [\n    { type: Pipe, args: [{\n                name: 'mask',\n                pure: true,\n            },] }\n];\n/** @nocollapse */\nMaskPipe.ctorParameters = () => [\n    { type: MaskApplierService }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskPipe.prototype._maskService;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxMaskModule {\n    /**\n     * @param {?=} configValue\n     * @return {?}\n     */\n    static forRoot(configValue) {\n        return {\n            ngModule: NgxMaskModule,\n            providers: [\n                {\n                    provide: NEW_CONFIG,\n                    useValue: configValue,\n                },\n                {\n                    provide: INITIAL_CONFIG,\n                    useValue: initialConfig,\n                },\n                {\n                    provide: config,\n                    useFactory: _configFactory,\n                    deps: [INITIAL_CONFIG, NEW_CONFIG],\n                },\n                MaskApplierService,\n            ],\n        };\n    }\n    /**\n     * @param {?=} _configValue\n     * @return {?}\n     */\n    static forChild(_configValue) {\n        return {\n            ngModule: NgxMaskModule,\n        };\n    }\n}\nNgxMaskModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [MaskDirective, MaskPipe],\n                declarations: [MaskDirective, MaskPipe],\n            },] }\n];\n/**\n * \\@internal\n * @param {?} initConfig\n * @param {?} configValue\n * @return {?}\n */\nfunction _configFactory(initConfig, configValue) {\n    return configValue instanceof Function ? Object.assign({}, initConfig, configValue()) : Object.assign({}, initConfig, configValue);\n}\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction commonjsRequire () {\n\tthrow new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');\n}\n\nfunction unwrapExports (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nfunction getCjsExportFromNamespace (n) {\n\treturn n && n['default'] || n;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n((/**\n * @return {?}\n */\nfunction () {\n    if (!commonjsGlobal.KeyboardEvent) {\n        commonjsGlobal.KeyboardEvent = (/**\n         * @param {?} _eventType\n         * @param {?} _init\n         * @return {?}\n         */\n        function (_eventType, _init) { });\n    }\n}))();\n\n\nvar customKeyboardEvent = {\n\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { INITIAL_CONFIG, MaskApplierService, MaskDirective, MaskPipe, MaskService, NEW_CONFIG, NgxMaskModule, _configFactory, config, initialConfig, timeMasks, withoutValidation };\n//# sourceMappingURL=ngx-mask.js.map\n"],"sourceRoot":"webpack:///","file":"default~app-salon-salon-module~app-user-user-module-es5.js"}